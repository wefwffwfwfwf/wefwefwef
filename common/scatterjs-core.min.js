! function(t) {
    var e = {};

    function n(r) {
        if (e[r]) return e[r].exports;
        var i = e[r] = {
            i: r,
            l: !1,
            exports: {}
        };
        return t[r].call(i.exports, i, i.exports, n), i.l = !0, i.exports
    }
    n.m = t, n.c = e, n.d = function(t, e, r) {
        n.o(t, e) || Object.defineProperty(t, e, {
            enumerable: !0,
            get: r
        })
    }, n.r = function(t) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(t, "__esModule", {
            value: !0
        })
    }, n.t = function(t, e) {
        if (1 & e && (t = n(t)), 8 & e) return t;
        if (4 & e && "object" == typeof t && t && t.__esModule) return t;
        var r = Object.create(null);
        if (n.r(r), Object.defineProperty(r, "default", {
                enumerable: !0,
                value: t
            }), 2 & e && "string" != typeof t)
            for (var i in t) n.d(r, i, function(e) {
                return t[e]
            }.bind(null, i));
        return r
    }, n.n = function(t) {
        var e = t && t.__esModule ? function() {
            return t.default
        } : function() {
            return t
        };
        return n.d(e, "a", e), e
    }, n.o = function(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e)
    }, n.p = "", n(n.s = 269)
}([function(t, e, n) {
    t.exports = n(27)
}, function(t, e) {
    function n(t, e, n, r, i, o, s) {
        try {
            var a = t[o](s),
                u = a.value
        } catch (t) {
            return void n(t)
        }
        a.done ? e(u) : Promise.resolve(u).then(r, i)
    }
    t.exports = function(t) {
        return function() {
            var e = this,
                r = arguments;
            return new Promise((function(i, o) {
                var s = t.apply(e, r);

                function a(t) {
                    n(s, i, o, a, u, "next", t)
                }

                function u(t) {
                    n(s, i, o, a, u, "throw", t)
                }
                a(void 0)
            }))
        }
    }
}, , function(t, e) {
    t.exports = function(t, e, n) {
        return e in t ? Object.defineProperty(t, e, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = n, t
    }
}, function(t, e) {
    t.exports = function(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")
    }
}, function(t, e) {
    function n(t, e) {
        for (var n = 0; n < e.length; n++) {
            var r = e[n];
            r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r)
        }
    }
    t.exports = function(t, e, r) {
        return e && n(t.prototype, e), r && n(t, r), t
    }
}, function(t, e, n) {
    var r = n(13),
        i = n(23);
    t.exports = function(t, e) {
        return !e || "object" !== r(e) && "function" != typeof e ? i(t) : e
    }
}, function(t, e) {
    var n;
    n = function() {
        return this
    }();
    try {
        n = n || new Function("return this")()
    } catch (t) {
        "object" == typeof window && (n = window)
    }
    t.exports = n
}, function(t, e) {
    function n(e) {
        return t.exports = n = Object.setPrototypeOf ? Object.getPrototypeOf : function(t) {
            return t.__proto__ || Object.getPrototypeOf(t)
        }, n(e)
    }
    t.exports = n
}, function(t, e, n) {
    var r = n(24);
    t.exports = function(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: t,
                writable: !0,
                configurable: !0
            }
        }), e && r(t, e)
    }
}, , , function(t, e, n) {
    "use strict";
    (function(t) {
        /*!
         * The buffer module from node.js, for the browser.
         *
         * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
         * @license  MIT
         */
        var r = n(39),
            i = n(40),
            o = n(29);

        function s() {
            return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823
        }

        function a(t, e) {
            if (s() < e) throw new RangeError("Invalid typed array length");
            return u.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e)).__proto__ = u.prototype : (null === t && (t = new u(e)), t.length = e), t
        }

        function u(t, e, n) {
            if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u)) return new u(t, e, n);
            if ("number" == typeof t) {
                if ("string" == typeof e) throw new Error("If encoding is specified then the first argument must be a string");
                return f(this, t)
            }
            return c(this, t, e, n)
        }

        function c(t, e, n, r) {
            if ("number" == typeof e) throw new TypeError('"value" argument must not be a number');
            return "undefined" != typeof ArrayBuffer && e instanceof ArrayBuffer ? function(t, e, n, r) {
                if (e.byteLength, n < 0 || e.byteLength < n) throw new RangeError("'offset' is out of bounds");
                if (e.byteLength < n + (r || 0)) throw new RangeError("'length' is out of bounds");
                e = void 0 === n && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, n) : new Uint8Array(e, n, r);
                u.TYPED_ARRAY_SUPPORT ? (t = e).__proto__ = u.prototype : t = l(t, e);
                return t
            }(t, e, n, r) : "string" == typeof e ? function(t, e, n) {
                "string" == typeof n && "" !== n || (n = "utf8");
                if (!u.isEncoding(n)) throw new TypeError('"encoding" must be a valid string encoding');
                var r = 0 | p(e, n),
                    i = (t = a(t, r)).write(e, n);
                i !== r && (t = t.slice(0, i));
                return t
            }(t, e, n) : function(t, e) {
                if (u.isBuffer(e)) {
                    var n = 0 | d(e.length);
                    return 0 === (t = a(t, n)).length ? t : (e.copy(t, 0, 0, n), t)
                }
                if (e) {
                    if ("undefined" != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer || "length" in e) return "number" != typeof e.length || (r = e.length) != r ? a(t, 0) : l(t, e);
                    if ("Buffer" === e.type && o(e.data)) return l(t, e.data)
                }
                var r;
                throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")
            }(t, e)
        }

        function h(t) {
            if ("number" != typeof t) throw new TypeError('"size" argument must be a number');
            if (t < 0) throw new RangeError('"size" argument must not be negative')
        }

        function f(t, e) {
            if (h(e), t = a(t, e < 0 ? 0 : 0 | d(e)), !u.TYPED_ARRAY_SUPPORT)
                for (var n = 0; n < e; ++n) t[n] = 0;
            return t
        }

        function l(t, e) {
            var n = e.length < 0 ? 0 : 0 | d(e.length);
            t = a(t, n);
            for (var r = 0; r < n; r += 1) t[r] = 255 & e[r];
            return t
        }

        function d(t) {
            if (t >= s()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s().toString(16) + " bytes");
            return 0 | t
        }

        function p(t, e) {
            if (u.isBuffer(t)) return t.length;
            if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)) return t.byteLength;
            "string" != typeof t && (t = "" + t);
            var n = t.length;
            if (0 === n) return 0;
            for (var r = !1;;) switch (e) {
                case "ascii":
                case "latin1":
                case "binary":
                    return n;
                case "utf8":
                case "utf-8":
                case void 0:
                    return N(t).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return 2 * n;
                case "hex":
                    return n >>> 1;
                case "base64":
                    return q(t).length;
                default:
                    if (r) return N(t).length;
                    e = ("" + e).toLowerCase(), r = !0
            }
        }

        function g(t, e, n) {
            var r = !1;
            if ((void 0 === e || e < 0) && (e = 0), e > this.length) return "";
            if ((void 0 === n || n > this.length) && (n = this.length), n <= 0) return "";
            if ((n >>>= 0) <= (e >>>= 0)) return "";
            for (t || (t = "utf8");;) switch (t) {
                case "hex":
                    return R(this, e, n);
                case "utf8":
                case "utf-8":
                    return x(this, e, n);
                case "ascii":
                    return O(this, e, n);
                case "latin1":
                case "binary":
                    return T(this, e, n);
                case "base64":
                    return E(this, e, n);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return I(this, e, n);
                default:
                    if (r) throw new TypeError("Unknown encoding: " + t);
                    t = (t + "").toLowerCase(), r = !0
            }
        }

        function y(t, e, n) {
            var r = t[e];
            t[e] = t[n], t[n] = r
        }

        function w(t, e, n, r, i) {
            if (0 === t.length) return -1;
            if ("string" == typeof n ? (r = n, n = 0) : n > 2147483647 ? n = 2147483647 : n < -2147483648 && (n = -2147483648), n = +n, isNaN(n) && (n = i ? 0 : t.length - 1), n < 0 && (n = t.length + n), n >= t.length) {
                if (i) return -1;
                n = t.length - 1
            } else if (n < 0) {
                if (!i) return -1;
                n = 0
            }
            if ("string" == typeof e && (e = u.from(e, r)), u.isBuffer(e)) return 0 === e.length ? -1 : v(t, e, n, r, i);
            if ("number" == typeof e) return e &= 255, u.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(t, e, n) : Uint8Array.prototype.lastIndexOf.call(t, e, n) : v(t, [e], n, r, i);
            throw new TypeError("val must be string, number or Buffer")
        }

        function v(t, e, n, r, i) {
            var o, s = 1,
                a = t.length,
                u = e.length;
            if (void 0 !== r && ("ucs2" === (r = String(r).toLowerCase()) || "ucs-2" === r || "utf16le" === r || "utf-16le" === r)) {
                if (t.length < 2 || e.length < 2) return -1;
                s = 2, a /= 2, u /= 2, n /= 2
            }

            function c(t, e) {
                return 1 === s ? t[e] : t.readUInt16BE(e * s)
            }
            if (i) {
                var h = -1;
                for (o = n; o < a; o++)
                    if (c(t, o) === c(e, -1 === h ? 0 : o - h)) {
                        if (-1 === h && (h = o), o - h + 1 === u) return h * s
                    } else -1 !== h && (o -= o - h), h = -1
            } else
                for (n + u > a && (n = a - u), o = n; o >= 0; o--) {
                    for (var f = !0, l = 0; l < u; l++)
                        if (c(t, o + l) !== c(e, l)) {
                            f = !1;
                            break
                        }
                    if (f) return o
                }
            return -1
        }

        function b(t, e, n, r) {
            n = Number(n) || 0;
            var i = t.length - n;
            r ? (r = Number(r)) > i && (r = i) : r = i;
            var o = e.length;
            if (o % 2 != 0) throw new TypeError("Invalid hex string");
            r > o / 2 && (r = o / 2);
            for (var s = 0; s < r; ++s) {
                var a = parseInt(e.substr(2 * s, 2), 16);
                if (isNaN(a)) return s;
                t[n + s] = a
            }
            return s
        }

        function m(t, e, n, r) {
            return K(N(e, t.length - n), t, n, r)
        }

        function _(t, e, n, r) {
            return K(function(t) {
                for (var e = [], n = 0; n < t.length; ++n) e.push(255 & t.charCodeAt(n));
                return e
            }(e), t, n, r)
        }

        function k(t, e, n, r) {
            return _(t, e, n, r)
        }

        function S(t, e, n, r) {
            return K(q(e), t, n, r)
        }

        function A(t, e, n, r) {
            return K(function(t, e) {
                for (var n, r, i, o = [], s = 0; s < t.length && !((e -= 2) < 0); ++s) n = t.charCodeAt(s), r = n >> 8, i = n % 256, o.push(i), o.push(r);
                return o
            }(e, t.length - n), t, n, r)
        }

        function E(t, e, n) {
            return 0 === e && n === t.length ? r.fromByteArray(t) : r.fromByteArray(t.slice(e, n))
        }

        function x(t, e, n) {
            n = Math.min(t.length, n);
            for (var r = [], i = e; i < n;) {
                var o, s, a, u, c = t[i],
                    h = null,
                    f = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;
                if (i + f <= n) switch (f) {
                    case 1:
                        c < 128 && (h = c);
                        break;
                    case 2:
                        128 == (192 & (o = t[i + 1])) && (u = (31 & c) << 6 | 63 & o) > 127 && (h = u);
                        break;
                    case 3:
                        o = t[i + 1], s = t[i + 2], 128 == (192 & o) && 128 == (192 & s) && (u = (15 & c) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (u < 55296 || u > 57343) && (h = u);
                        break;
                    case 4:
                        o = t[i + 1], s = t[i + 2], a = t[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (u = (15 & c) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && u < 1114112 && (h = u)
                }
                null === h ? (h = 65533, f = 1) : h > 65535 && (h -= 65536, r.push(h >>> 10 & 1023 | 55296), h = 56320 | 1023 & h), r.push(h), i += f
            }
            return function(t) {
                var e = t.length;
                if (e <= P) return String.fromCharCode.apply(String, t);
                var n = "",
                    r = 0;
                for (; r < e;) n += String.fromCharCode.apply(String, t.slice(r, r += P));
                return n
            }(r)
        }
        e.Buffer = u, e.SlowBuffer = function(t) {
            +t != t && (t = 0);
            return u.alloc(+t)
        }, e.INSPECT_MAX_BYTES = 50, u.TYPED_ARRAY_SUPPORT = void 0 !== t.TYPED_ARRAY_SUPPORT ? t.TYPED_ARRAY_SUPPORT : function() {
            try {
                var t = new Uint8Array(1);
                return t.__proto__ = {
                    __proto__: Uint8Array.prototype,
                    foo: function() {
                        return 42
                    }
                }, 42 === t.foo() && "function" == typeof t.subarray && 0 === t.subarray(1, 1).byteLength
            } catch (t) {
                return !1
            }
        }(), e.kMaxLength = s(), u.poolSize = 8192, u._augment = function(t) {
            return t.__proto__ = u.prototype, t
        }, u.from = function(t, e, n) {
            return c(null, t, e, n)
        }, u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype, u.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, {
            value: null,
            configurable: !0
        })), u.alloc = function(t, e, n) {
            return function(t, e, n, r) {
                return h(e), e <= 0 ? a(t, e) : void 0 !== n ? "string" == typeof r ? a(t, e).fill(n, r) : a(t, e).fill(n) : a(t, e)
            }(null, t, e, n)
        }, u.allocUnsafe = function(t) {
            return f(null, t)
        }, u.allocUnsafeSlow = function(t) {
            return f(null, t)
        }, u.isBuffer = function(t) {
            return !(null == t || !t._isBuffer)
        }, u.compare = function(t, e) {
            if (!u.isBuffer(t) || !u.isBuffer(e)) throw new TypeError("Arguments must be Buffers");
            if (t === e) return 0;
            for (var n = t.length, r = e.length, i = 0, o = Math.min(n, r); i < o; ++i)
                if (t[i] !== e[i]) {
                    n = t[i], r = e[i];
                    break
                }
            return n < r ? -1 : r < n ? 1 : 0
        }, u.isEncoding = function(t) {
            switch (String(t).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return !0;
                default:
                    return !1
            }
        }, u.concat = function(t, e) {
            if (!o(t)) throw new TypeError('"list" argument must be an Array of Buffers');
            if (0 === t.length) return u.alloc(0);
            var n;
            if (void 0 === e)
                for (e = 0, n = 0; n < t.length; ++n) e += t[n].length;
            var r = u.allocUnsafe(e),
                i = 0;
            for (n = 0; n < t.length; ++n) {
                var s = t[n];
                if (!u.isBuffer(s)) throw new TypeError('"list" argument must be an Array of Buffers');
                s.copy(r, i), i += s.length
            }
            return r
        }, u.byteLength = p, u.prototype._isBuffer = !0, u.prototype.swap16 = function() {
            var t = this.length;
            if (t % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var e = 0; e < t; e += 2) y(this, e, e + 1);
            return this
        }, u.prototype.swap32 = function() {
            var t = this.length;
            if (t % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var e = 0; e < t; e += 4) y(this, e, e + 3), y(this, e + 1, e + 2);
            return this
        }, u.prototype.swap64 = function() {
            var t = this.length;
            if (t % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var e = 0; e < t; e += 8) y(this, e, e + 7), y(this, e + 1, e + 6), y(this, e + 2, e + 5), y(this, e + 3, e + 4);
            return this
        }, u.prototype.toString = function() {
            var t = 0 | this.length;
            return 0 === t ? "" : 0 === arguments.length ? x(this, 0, t) : g.apply(this, arguments)
        }, u.prototype.equals = function(t) {
            if (!u.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
            return this === t || 0 === u.compare(this, t)
        }, u.prototype.inspect = function() {
            var t = "",
                n = e.INSPECT_MAX_BYTES;
            return this.length > 0 && (t = this.toString("hex", 0, n).match(/.{2}/g).join(" "), this.length > n && (t += " ... ")), "<Buffer " + t + ">"
        }, u.prototype.compare = function(t, e, n, r, i) {
            if (!u.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
            if (void 0 === e && (e = 0), void 0 === n && (n = t ? t.length : 0), void 0 === r && (r = 0), void 0 === i && (i = this.length), e < 0 || n > t.length || r < 0 || i > this.length) throw new RangeError("out of range index");
            if (r >= i && e >= n) return 0;
            if (r >= i) return -1;
            if (e >= n) return 1;
            if (this === t) return 0;
            for (var o = (i >>>= 0) - (r >>>= 0), s = (n >>>= 0) - (e >>>= 0), a = Math.min(o, s), c = this.slice(r, i), h = t.slice(e, n), f = 0; f < a; ++f)
                if (c[f] !== h[f]) {
                    o = c[f], s = h[f];
                    break
                }
            return o < s ? -1 : s < o ? 1 : 0
        }, u.prototype.includes = function(t, e, n) {
            return -1 !== this.indexOf(t, e, n)
        }, u.prototype.indexOf = function(t, e, n) {
            return w(this, t, e, n, !0)
        }, u.prototype.lastIndexOf = function(t, e, n) {
            return w(this, t, e, n, !1)
        }, u.prototype.write = function(t, e, n, r) {
            if (void 0 === e) r = "utf8", n = this.length, e = 0;
            else if (void 0 === n && "string" == typeof e) r = e, n = this.length, e = 0;
            else {
                if (!isFinite(e)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                e |= 0, isFinite(n) ? (n |= 0, void 0 === r && (r = "utf8")) : (r = n, n = void 0)
            }
            var i = this.length - e;
            if ((void 0 === n || n > i) && (n = i), t.length > 0 && (n < 0 || e < 0) || e > this.length) throw new RangeError("Attempt to write outside buffer bounds");
            r || (r = "utf8");
            for (var o = !1;;) switch (r) {
                case "hex":
                    return b(this, t, e, n);
                case "utf8":
                case "utf-8":
                    return m(this, t, e, n);
                case "ascii":
                    return _(this, t, e, n);
                case "latin1":
                case "binary":
                    return k(this, t, e, n);
                case "base64":
                    return S(this, t, e, n);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return A(this, t, e, n);
                default:
                    if (o) throw new TypeError("Unknown encoding: " + r);
                    r = ("" + r).toLowerCase(), o = !0
            }
        }, u.prototype.toJSON = function() {
            return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
            }
        };
        var P = 4096;

        function O(t, e, n) {
            var r = "";
            n = Math.min(t.length, n);
            for (var i = e; i < n; ++i) r += String.fromCharCode(127 & t[i]);
            return r
        }

        function T(t, e, n) {
            var r = "";
            n = Math.min(t.length, n);
            for (var i = e; i < n; ++i) r += String.fromCharCode(t[i]);
            return r
        }

        function R(t, e, n) {
            var r = t.length;
            (!e || e < 0) && (e = 0), (!n || n < 0 || n > r) && (n = r);
            for (var i = "", o = e; o < n; ++o) i += D(t[o]);
            return i
        }

        function I(t, e, n) {
            for (var r = t.slice(e, n), i = "", o = 0; o < r.length; o += 2) i += String.fromCharCode(r[o] + 256 * r[o + 1]);
            return i
        }

        function L(t, e, n) {
            if (t % 1 != 0 || t < 0) throw new RangeError("offset is not uint");
            if (t + e > n) throw new RangeError("Trying to access beyond buffer length")
        }

        function B(t, e, n, r, i, o) {
            if (!u.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
            if (e > i || e < o) throw new RangeError('"value" argument is out of bounds');
            if (n + r > t.length) throw new RangeError("Index out of range")
        }

        function C(t, e, n, r) {
            e < 0 && (e = 65535 + e + 1);
            for (var i = 0, o = Math.min(t.length - n, 2); i < o; ++i) t[n + i] = (e & 255 << 8 * (r ? i : 1 - i)) >>> 8 * (r ? i : 1 - i)
        }

        function M(t, e, n, r) {
            e < 0 && (e = 4294967295 + e + 1);
            for (var i = 0, o = Math.min(t.length - n, 4); i < o; ++i) t[n + i] = e >>> 8 * (r ? i : 3 - i) & 255
        }

        function F(t, e, n, r, i, o) {
            if (n + r > t.length) throw new RangeError("Index out of range");
            if (n < 0) throw new RangeError("Index out of range")
        }

        function j(t, e, n, r, o) {
            return o || F(t, 0, n, 4), i.write(t, e, n, r, 23, 4), n + 4
        }

        function W(t, e, n, r, o) {
            return o || F(t, 0, n, 8), i.write(t, e, n, r, 52, 8), n + 8
        }
        u.prototype.slice = function(t, e) {
            var n, r = this.length;
            if ((t = ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), (e = void 0 === e ? r : ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), e < t && (e = t), u.TYPED_ARRAY_SUPPORT)(n = this.subarray(t, e)).__proto__ = u.prototype;
            else {
                var i = e - t;
                n = new u(i, void 0);
                for (var o = 0; o < i; ++o) n[o] = this[o + t]
            }
            return n
        }, u.prototype.readUIntLE = function(t, e, n) {
            t |= 0, e |= 0, n || L(t, e, this.length);
            for (var r = this[t], i = 1, o = 0; ++o < e && (i *= 256);) r += this[t + o] * i;
            return r
        }, u.prototype.readUIntBE = function(t, e, n) {
            t |= 0, e |= 0, n || L(t, e, this.length);
            for (var r = this[t + --e], i = 1; e > 0 && (i *= 256);) r += this[t + --e] * i;
            return r
        }, u.prototype.readUInt8 = function(t, e) {
            return e || L(t, 1, this.length), this[t]
        }, u.prototype.readUInt16LE = function(t, e) {
            return e || L(t, 2, this.length), this[t] | this[t + 1] << 8
        }, u.prototype.readUInt16BE = function(t, e) {
            return e || L(t, 2, this.length), this[t] << 8 | this[t + 1]
        }, u.prototype.readUInt32LE = function(t, e) {
            return e || L(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3]
        }, u.prototype.readUInt32BE = function(t, e) {
            return e || L(t, 4, this.length), 16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3])
        }, u.prototype.readIntLE = function(t, e, n) {
            t |= 0, e |= 0, n || L(t, e, this.length);
            for (var r = this[t], i = 1, o = 0; ++o < e && (i *= 256);) r += this[t + o] * i;
            return r >= (i *= 128) && (r -= Math.pow(2, 8 * e)), r
        }, u.prototype.readIntBE = function(t, e, n) {
            t |= 0, e |= 0, n || L(t, e, this.length);
            for (var r = e, i = 1, o = this[t + --r]; r > 0 && (i *= 256);) o += this[t + --r] * i;
            return o >= (i *= 128) && (o -= Math.pow(2, 8 * e)), o
        }, u.prototype.readInt8 = function(t, e) {
            return e || L(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
        }, u.prototype.readInt16LE = function(t, e) {
            e || L(t, 2, this.length);
            var n = this[t] | this[t + 1] << 8;
            return 32768 & n ? 4294901760 | n : n
        }, u.prototype.readInt16BE = function(t, e) {
            e || L(t, 2, this.length);
            var n = this[t + 1] | this[t] << 8;
            return 32768 & n ? 4294901760 | n : n
        }, u.prototype.readInt32LE = function(t, e) {
            return e || L(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24
        }, u.prototype.readInt32BE = function(t, e) {
            return e || L(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]
        }, u.prototype.readFloatLE = function(t, e) {
            return e || L(t, 4, this.length), i.read(this, t, !0, 23, 4)
        }, u.prototype.readFloatBE = function(t, e) {
            return e || L(t, 4, this.length), i.read(this, t, !1, 23, 4)
        }, u.prototype.readDoubleLE = function(t, e) {
            return e || L(t, 8, this.length), i.read(this, t, !0, 52, 8)
        }, u.prototype.readDoubleBE = function(t, e) {
            return e || L(t, 8, this.length), i.read(this, t, !1, 52, 8)
        }, u.prototype.writeUIntLE = function(t, e, n, r) {
            (t = +t, e |= 0, n |= 0, r) || B(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
            var i = 1,
                o = 0;
            for (this[e] = 255 & t; ++o < n && (i *= 256);) this[e + o] = t / i & 255;
            return e + n
        }, u.prototype.writeUIntBE = function(t, e, n, r) {
            (t = +t, e |= 0, n |= 0, r) || B(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
            var i = n - 1,
                o = 1;
            for (this[e + i] = 255 & t; --i >= 0 && (o *= 256);) this[e + i] = t / o & 255;
            return e + n
        }, u.prototype.writeUInt8 = function(t, e, n) {
            return t = +t, e |= 0, n || B(this, t, e, 1, 255, 0), u.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), this[e] = 255 & t, e + 1
        }, u.prototype.writeUInt16LE = function(t, e, n) {
            return t = +t, e |= 0, n || B(this, t, e, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : C(this, t, e, !0), e + 2
        }, u.prototype.writeUInt16BE = function(t, e, n) {
            return t = +t, e |= 0, n || B(this, t, e, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : C(this, t, e, !1), e + 2
        }, u.prototype.writeUInt32LE = function(t, e, n) {
            return t = +t, e |= 0, n || B(this, t, e, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[e + 3] = t >>> 24, this[e + 2] = t >>> 16, this[e + 1] = t >>> 8, this[e] = 255 & t) : M(this, t, e, !0), e + 4
        }, u.prototype.writeUInt32BE = function(t, e, n) {
            return t = +t, e |= 0, n || B(this, t, e, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : M(this, t, e, !1), e + 4
        }, u.prototype.writeIntLE = function(t, e, n, r) {
            if (t = +t, e |= 0, !r) {
                var i = Math.pow(2, 8 * n - 1);
                B(this, t, e, n, i - 1, -i)
            }
            var o = 0,
                s = 1,
                a = 0;
            for (this[e] = 255 & t; ++o < n && (s *= 256);) t < 0 && 0 === a && 0 !== this[e + o - 1] && (a = 1), this[e + o] = (t / s >> 0) - a & 255;
            return e + n
        }, u.prototype.writeIntBE = function(t, e, n, r) {
            if (t = +t, e |= 0, !r) {
                var i = Math.pow(2, 8 * n - 1);
                B(this, t, e, n, i - 1, -i)
            }
            var o = n - 1,
                s = 1,
                a = 0;
            for (this[e + o] = 255 & t; --o >= 0 && (s *= 256);) t < 0 && 0 === a && 0 !== this[e + o + 1] && (a = 1), this[e + o] = (t / s >> 0) - a & 255;
            return e + n
        }, u.prototype.writeInt8 = function(t, e, n) {
            return t = +t, e |= 0, n || B(this, t, e, 1, 127, -128), u.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), t < 0 && (t = 255 + t + 1), this[e] = 255 & t, e + 1
        }, u.prototype.writeInt16LE = function(t, e, n) {
            return t = +t, e |= 0, n || B(this, t, e, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : C(this, t, e, !0), e + 2
        }, u.prototype.writeInt16BE = function(t, e, n) {
            return t = +t, e |= 0, n || B(this, t, e, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : C(this, t, e, !1), e + 2
        }, u.prototype.writeInt32LE = function(t, e, n) {
            return t = +t, e |= 0, n || B(this, t, e, 4, 2147483647, -2147483648), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8, this[e + 2] = t >>> 16, this[e + 3] = t >>> 24) : M(this, t, e, !0), e + 4
        }, u.prototype.writeInt32BE = function(t, e, n) {
            return t = +t, e |= 0, n || B(this, t, e, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : M(this, t, e, !1), e + 4
        }, u.prototype.writeFloatLE = function(t, e, n) {
            return j(this, t, e, !0, n)
        }, u.prototype.writeFloatBE = function(t, e, n) {
            return j(this, t, e, !1, n)
        }, u.prototype.writeDoubleLE = function(t, e, n) {
            return W(this, t, e, !0, n)
        }, u.prototype.writeDoubleBE = function(t, e, n) {
            return W(this, t, e, !1, n)
        }, u.prototype.copy = function(t, e, n, r) {
            if (n || (n = 0), r || 0 === r || (r = this.length), e >= t.length && (e = t.length), e || (e = 0), r > 0 && r < n && (r = n), r === n) return 0;
            if (0 === t.length || 0 === this.length) return 0;
            if (e < 0) throw new RangeError("targetStart out of bounds");
            if (n < 0 || n >= this.length) throw new RangeError("sourceStart out of bounds");
            if (r < 0) throw new RangeError("sourceEnd out of bounds");
            r > this.length && (r = this.length), t.length - e < r - n && (r = t.length - e + n);
            var i, o = r - n;
            if (this === t && n < e && e < r)
                for (i = o - 1; i >= 0; --i) t[i + e] = this[i + n];
            else if (o < 1e3 || !u.TYPED_ARRAY_SUPPORT)
                for (i = 0; i < o; ++i) t[i + e] = this[i + n];
            else Uint8Array.prototype.set.call(t, this.subarray(n, n + o), e);
            return o
        }, u.prototype.fill = function(t, e, n, r) {
            if ("string" == typeof t) {
                if ("string" == typeof e ? (r = e, e = 0, n = this.length) : "string" == typeof n && (r = n, n = this.length), 1 === t.length) {
                    var i = t.charCodeAt(0);
                    i < 256 && (t = i)
                }
                if (void 0 !== r && "string" != typeof r) throw new TypeError("encoding must be a string");
                if ("string" == typeof r && !u.isEncoding(r)) throw new TypeError("Unknown encoding: " + r)
            } else "number" == typeof t && (t &= 255);
            if (e < 0 || this.length < e || this.length < n) throw new RangeError("Out of range index");
            if (n <= e) return this;
            var o;
            if (e >>>= 0, n = void 0 === n ? this.length : n >>> 0, t || (t = 0), "number" == typeof t)
                for (o = e; o < n; ++o) this[o] = t;
            else {
                var s = u.isBuffer(t) ? t : N(new u(t, r).toString()),
                    a = s.length;
                for (o = 0; o < n - e; ++o) this[o + e] = s[o % a]
            }
            return this
        };
        var U = /[^+\/0-9A-Za-z-_]/g;

        function D(t) {
            return t < 16 ? "0" + t.toString(16) : t.toString(16)
        }

        function N(t, e) {
            var n;
            e = e || 1 / 0;
            for (var r = t.length, i = null, o = [], s = 0; s < r; ++s) {
                if ((n = t.charCodeAt(s)) > 55295 && n < 57344) {
                    if (!i) {
                        if (n > 56319) {
                            (e -= 3) > -1 && o.push(239, 191, 189);
                            continue
                        }
                        if (s + 1 === r) {
                            (e -= 3) > -1 && o.push(239, 191, 189);
                            continue
                        }
                        i = n;
                        continue
                    }
                    if (n < 56320) {
                        (e -= 3) > -1 && o.push(239, 191, 189), i = n;
                        continue
                    }
                    n = 65536 + (i - 55296 << 10 | n - 56320)
                } else i && (e -= 3) > -1 && o.push(239, 191, 189);
                if (i = null, n < 128) {
                    if ((e -= 1) < 0) break;
                    o.push(n)
                } else if (n < 2048) {
                    if ((e -= 2) < 0) break;
                    o.push(n >> 6 | 192, 63 & n | 128)
                } else if (n < 65536) {
                    if ((e -= 3) < 0) break;
                    o.push(n >> 12 | 224, n >> 6 & 63 | 128, 63 & n | 128)
                } else {
                    if (!(n < 1114112)) throw new Error("Invalid code point");
                    if ((e -= 4) < 0) break;
                    o.push(n >> 18 | 240, n >> 12 & 63 | 128, n >> 6 & 63 | 128, 63 & n | 128)
                }
            }
            return o
        }

        function q(t) {
            return r.toByteArray(function(t) {
                if ((t = function(t) {
                        return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "")
                    }(t).replace(U, "")).length < 2) return "";
                for (; t.length % 4 != 0;) t += "=";
                return t
            }(t))
        }

        function K(t, e, n, r) {
            for (var i = 0; i < r && !(i + n >= e.length || i >= t.length); ++i) e[i + n] = t[i];
            return i
        }
    }).call(this, n(7))
}, function(t, e) {
    function n(t) {
        return (n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
            return typeof t
        } : function(t) {
            return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
        })(t)
    }

    function r(e) {
        return "function" == typeof Symbol && "symbol" === n(Symbol.iterator) ? t.exports = r = function(t) {
            return n(t)
        } : t.exports = r = function(t) {
            return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : n(t)
        }, r(e)
    }
    t.exports = r
}, function(t, e, n) {
    "use strict";
    var r = n(28),
        i = Object.keys || function(t) {
            var e = [];
            for (var n in t) e.push(n);
            return e
        };
    t.exports = f;
    var o = n(22);
    o.inherits = n(17);
    var s = n(41),
        a = n(33);
    o.inherits(f, s);
    for (var u = i(a.prototype), c = 0; c < u.length; c++) {
        var h = u[c];
        f.prototype[h] || (f.prototype[h] = a.prototype[h])
    }

    function f(t) {
        if (!(this instanceof f)) return new f(t);
        s.call(this, t), a.call(this, t), t && !1 === t.readable && (this.readable = !1), t && !1 === t.writable && (this.writable = !1), this.allowHalfOpen = !0, t && !1 === t.allowHalfOpen && (this.allowHalfOpen = !1), this.once("end", l)
    }

    function l() {
        this.allowHalfOpen || this._writableState.ended || r.nextTick(d, this)
    }

    function d(t) {
        t.end()
    }
    Object.defineProperty(f.prototype, "writableHighWaterMark", {
        enumerable: !1,
        get: function() {
            return this._writableState.highWaterMark
        }
    }), Object.defineProperty(f.prototype, "destroyed", {
        get: function() {
            return void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed && this._writableState.destroyed)
        },
        set: function(t) {
            void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = t, this._writableState.destroyed = t)
        }
    }), f.prototype._destroy = function(t, e) {
        this.push(null), this.end(), r.nextTick(e, t)
    }
}, function(t, e, n) {
    "use strict";
    var r, i = "object" == typeof Reflect ? Reflect : null,
        o = i && "function" == typeof i.apply ? i.apply : function(t, e, n) {
            return Function.prototype.apply.call(t, e, n)
        };
    r = i && "function" == typeof i.ownKeys ? i.ownKeys : Object.getOwnPropertySymbols ? function(t) {
        return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))
    } : function(t) {
        return Object.getOwnPropertyNames(t)
    };
    var s = Number.isNaN || function(t) {
        return t != t
    };

    function a() {
        a.init.call(this)
    }
    t.exports = a, a.EventEmitter = a, a.prototype._events = void 0, a.prototype._eventsCount = 0, a.prototype._maxListeners = void 0;
    var u = 10;

    function c(t) {
        return void 0 === t._maxListeners ? a.defaultMaxListeners : t._maxListeners
    }

    function h(t, e, n, r) {
        var i, o, s, a;
        if ("function" != typeof n) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof n);
        if (void 0 === (o = t._events) ? (o = t._events = Object.create(null), t._eventsCount = 0) : (void 0 !== o.newListener && (t.emit("newListener", e, n.listener ? n.listener : n), o = t._events), s = o[e]), void 0 === s) s = o[e] = n, ++t._eventsCount;
        else if ("function" == typeof s ? s = o[e] = r ? [n, s] : [s, n] : r ? s.unshift(n) : s.push(n), (i = c(t)) > 0 && s.length > i && !s.warned) {
            s.warned = !0;
            var u = new Error("Possible EventEmitter memory leak detected. " + s.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            u.name = "MaxListenersExceededWarning", u.emitter = t, u.type = e, u.count = s.length, a = u, console && console.warn && console.warn(a)
        }
        return t
    }

    function f() {
        for (var t = [], e = 0; e < arguments.length; e++) t.push(arguments[e]);
        this.fired || (this.target.removeListener(this.type, this.wrapFn), this.fired = !0, o(this.listener, this.target, t))
    }

    function l(t, e, n) {
        var r = {
                fired: !1,
                wrapFn: void 0,
                target: t,
                type: e,
                listener: n
            },
            i = f.bind(r);
        return i.listener = n, r.wrapFn = i, i
    }

    function d(t, e, n) {
        var r = t._events;
        if (void 0 === r) return [];
        var i = r[e];
        return void 0 === i ? [] : "function" == typeof i ? n ? [i.listener || i] : [i] : n ? function(t) {
            for (var e = new Array(t.length), n = 0; n < e.length; ++n) e[n] = t[n].listener || t[n];
            return e
        }(i) : g(i, i.length)
    }

    function p(t) {
        var e = this._events;
        if (void 0 !== e) {
            var n = e[t];
            if ("function" == typeof n) return 1;
            if (void 0 !== n) return n.length
        }
        return 0
    }

    function g(t, e) {
        for (var n = new Array(e), r = 0; r < e; ++r) n[r] = t[r];
        return n
    }
    Object.defineProperty(a, "defaultMaxListeners", {
        enumerable: !0,
        get: function() {
            return u
        },
        set: function(t) {
            if ("number" != typeof t || t < 0 || s(t)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t + ".");
            u = t
        }
    }), a.init = function() {
        void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0
    }, a.prototype.setMaxListeners = function(t) {
        if ("number" != typeof t || t < 0 || s(t)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t + ".");
        return this._maxListeners = t, this
    }, a.prototype.getMaxListeners = function() {
        return c(this)
    }, a.prototype.emit = function(t) {
        for (var e = [], n = 1; n < arguments.length; n++) e.push(arguments[n]);
        var r = "error" === t,
            i = this._events;
        if (void 0 !== i) r = r && void 0 === i.error;
        else if (!r) return !1;
        if (r) {
            var s;
            if (e.length > 0 && (s = e[0]), s instanceof Error) throw s;
            var a = new Error("Unhandled error." + (s ? " (" + s.message + ")" : ""));
            throw a.context = s, a
        }
        var u = i[t];
        if (void 0 === u) return !1;
        if ("function" == typeof u) o(u, this, e);
        else {
            var c = u.length,
                h = g(u, c);
            for (n = 0; n < c; ++n) o(h[n], this, e)
        }
        return !0
    }, a.prototype.addListener = function(t, e) {
        return h(this, t, e, !1)
    }, a.prototype.on = a.prototype.addListener, a.prototype.prependListener = function(t, e) {
        return h(this, t, e, !0)
    }, a.prototype.once = function(t, e) {
        if ("function" != typeof e) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e);
        return this.on(t, l(this, t, e)), this
    }, a.prototype.prependOnceListener = function(t, e) {
        if ("function" != typeof e) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e);
        return this.prependListener(t, l(this, t, e)), this
    }, a.prototype.removeListener = function(t, e) {
        var n, r, i, o, s;
        if ("function" != typeof e) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e);
        if (void 0 === (r = this._events)) return this;
        if (void 0 === (n = r[t])) return this;
        if (n === e || n.listener === e) 0 == --this._eventsCount ? this._events = Object.create(null) : (delete r[t], r.removeListener && this.emit("removeListener", t, n.listener || e));
        else if ("function" != typeof n) {
            for (i = -1, o = n.length - 1; o >= 0; o--)
                if (n[o] === e || n[o].listener === e) {
                    s = n[o].listener, i = o;
                    break
                }
            if (i < 0) return this;
            0 === i ? n.shift() : function(t, e) {
                for (; e + 1 < t.length; e++) t[e] = t[e + 1];
                t.pop()
            }(n, i), 1 === n.length && (r[t] = n[0]), void 0 !== r.removeListener && this.emit("removeListener", t, s || e)
        }
        return this
    }, a.prototype.off = a.prototype.removeListener, a.prototype.removeAllListeners = function(t) {
        var e, n, r;
        if (void 0 === (n = this._events)) return this;
        if (void 0 === n.removeListener) return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== n[t] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete n[t]), this;
        if (0 === arguments.length) {
            var i, o = Object.keys(n);
            for (r = 0; r < o.length; ++r) "removeListener" !== (i = o[r]) && this.removeAllListeners(i);
            return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this
        }
        if ("function" == typeof(e = n[t])) this.removeListener(t, e);
        else if (void 0 !== e)
            for (r = e.length - 1; r >= 0; r--) this.removeListener(t, e[r]);
        return this
    }, a.prototype.listeners = function(t) {
        return d(this, t, !0)
    }, a.prototype.rawListeners = function(t) {
        return d(this, t, !1)
    }, a.listenerCount = function(t, e) {
        return "function" == typeof t.listenerCount ? t.listenerCount(e) : p.call(t, e)
    }, a.prototype.listenerCount = p, a.prototype.eventNames = function() {
        return this._eventsCount > 0 ? r(this._events) : []
    }
}, , function(t, e) {
    "function" == typeof Object.create ? t.exports = function(t, e) {
        e && (t.super_ = e, t.prototype = Object.create(e.prototype, {
            constructor: {
                value: t,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }))
    } : t.exports = function(t, e) {
        if (e) {
            t.super_ = e;
            var n = function() {};
            n.prototype = e.prototype, t.prototype = new n, t.prototype.constructor = t
        }
    }
}, function(t, e) {
    var n, r, i = t.exports = {};

    function o() {
        throw new Error("setTimeout has not been defined")
    }

    function s() {
        throw new Error("clearTimeout has not been defined")
    }

    function a(t) {
        if (n === setTimeout) return setTimeout(t, 0);
        if ((n === o || !n) && setTimeout) return n = setTimeout, setTimeout(t, 0);
        try {
            return n(t, 0)
        } catch (e) {
            try {
                return n.call(null, t, 0)
            } catch (e) {
                return n.call(this, t, 0)
            }
        }
    }! function() {
        try {
            n = "function" == typeof setTimeout ? setTimeout : o
        } catch (t) {
            n = o
        }
        try {
            r = "function" == typeof clearTimeout ? clearTimeout : s
        } catch (t) {
            r = s
        }
    }();
    var u, c = [],
        h = !1,
        f = -1;

    function l() {
        h && u && (h = !1, u.length ? c = u.concat(c) : f = -1, c.length && d())
    }

    function d() {
        if (!h) {
            var t = a(l);
            h = !0;
            for (var e = c.length; e;) {
                for (u = c, c = []; ++f < e;) u && u[f].run();
                f = -1, e = c.length
            }
            u = null, h = !1,
                function(t) {
                    if (r === clearTimeout) return clearTimeout(t);
                    if ((r === s || !r) && clearTimeout) return r = clearTimeout, clearTimeout(t);
                    try {
                        r(t)
                    } catch (e) {
                        try {
                            return r.call(null, t)
                        } catch (e) {
                            return r.call(this, t)
                        }
                    }
                }(t)
        }
    }

    function p(t, e) {
        this.fun = t, this.array = e
    }

    function g() {}
    i.nextTick = function(t) {
        var e = new Array(arguments.length - 1);
        if (arguments.length > 1)
            for (var n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
        c.push(new p(t, e)), 1 !== c.length || h || a(d)
    }, p.prototype.run = function() {
        this.fun.apply(null, this.array)
    }, i.title = "browser", i.browser = !0, i.env = {}, i.argv = [], i.version = "", i.versions = {}, i.on = g, i.addListener = g, i.once = g, i.off = g, i.removeListener = g, i.removeAllListeners = g, i.emit = g, i.prependListener = g, i.prependOnceListener = g, i.listeners = function(t) {
        return []
    }, i.binding = function(t) {
        throw new Error("process.binding is not supported")
    }, i.cwd = function() {
        return "/"
    }, i.chdir = function(t) {
        throw new Error("process.chdir is not supported")
    }, i.umask = function() {
        return 0
    }
}, , , function(t, e) {
    "function" == typeof Object.create ? t.exports = function(t, e) {
        t.super_ = e, t.prototype = Object.create(e.prototype, {
            constructor: {
                value: t,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        })
    } : t.exports = function(t, e) {
        t.super_ = e;
        var n = function() {};
        n.prototype = e.prototype, t.prototype = new n, t.prototype.constructor = t
    }
}, function(t, e, n) {
    (function(t) {
        function n(t) {
            return Object.prototype.toString.call(t)
        }
        e.isArray = function(t) {
            return Array.isArray ? Array.isArray(t) : "[object Array]" === n(t)
        }, e.isBoolean = function(t) {
            return "boolean" == typeof t
        }, e.isNull = function(t) {
            return null === t
        }, e.isNullOrUndefined = function(t) {
            return null == t
        }, e.isNumber = function(t) {
            return "number" == typeof t
        }, e.isString = function(t) {
            return "string" == typeof t
        }, e.isSymbol = function(t) {
            return "symbol" == typeof t
        }, e.isUndefined = function(t) {
            return void 0 === t
        }, e.isRegExp = function(t) {
            return "[object RegExp]" === n(t)
        }, e.isObject = function(t) {
            return "object" == typeof t && null !== t
        }, e.isDate = function(t) {
            return "[object Date]" === n(t)
        }, e.isError = function(t) {
            return "[object Error]" === n(t) || t instanceof Error
        }, e.isFunction = function(t) {
            return "function" == typeof t
        }, e.isPrimitive = function(t) {
            return null === t || "boolean" == typeof t || "number" == typeof t || "string" == typeof t || "symbol" == typeof t || void 0 === t
        }, e.isBuffer = t.isBuffer
    }).call(this, n(12).Buffer)
}, function(t, e) {
    t.exports = function(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t
    }
}, function(t, e) {
    function n(e, r) {
        return t.exports = n = Object.setPrototypeOf || function(t, e) {
            return t.__proto__ = e, t
        }, n(e, r)
    }
    t.exports = n
}, function(t, e, n) {
    var r = n(12),
        i = r.Buffer;

    function o(t, e) {
        for (var n in t) e[n] = t[n]
    }

    function s(t, e, n) {
        return i(t, e, n)
    }
    i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t.exports = r : (o(r, e), e.Buffer = s), o(i, s), s.from = function(t, e, n) {
        if ("number" == typeof t) throw new TypeError("Argument must not be a number");
        return i(t, e, n)
    }, s.alloc = function(t, e, n) {
        if ("number" != typeof t) throw new TypeError("Argument must be a number");
        var r = i(t);
        return void 0 !== e ? "string" == typeof n ? r.fill(e, n) : r.fill(e) : r.fill(0), r
    }, s.allocUnsafe = function(t) {
        if ("number" != typeof t) throw new TypeError("Argument must be a number");
        return i(t)
    }, s.allocUnsafeSlow = function(t) {
        if ("number" != typeof t) throw new TypeError("Argument must be a number");
        return r.SlowBuffer(t)
    }
}, , function(t, e, n) {
    var r = function(t) {
        "use strict";
        var e, n = Object.prototype,
            r = n.hasOwnProperty,
            i = "function" == typeof Symbol ? Symbol : {},
            o = i.iterator || "@@iterator",
            s = i.asyncIterator || "@@asyncIterator",
            a = i.toStringTag || "@@toStringTag";

        function u(t, e, n, r) {
            var i = e && e.prototype instanceof g ? e : g,
                o = Object.create(i.prototype),
                s = new P(r || []);
            return o._invoke = function(t, e, n) {
                var r = h;
                return function(i, o) {
                    if (r === l) throw new Error("Generator is already running");
                    if (r === d) {
                        if ("throw" === i) throw o;
                        return T()
                    }
                    for (n.method = i, n.arg = o;;) {
                        var s = n.delegate;
                        if (s) {
                            var a = A(s, n);
                            if (a) {
                                if (a === p) continue;
                                return a
                            }
                        }
                        if ("next" === n.method) n.sent = n._sent = n.arg;
                        else if ("throw" === n.method) {
                            if (r === h) throw r = d, n.arg;
                            n.dispatchException(n.arg)
                        } else "return" === n.method && n.abrupt("return", n.arg);
                        r = l;
                        var u = c(t, e, n);
                        if ("normal" === u.type) {
                            if (r = n.done ? d : f, u.arg === p) continue;
                            return {
                                value: u.arg,
                                done: n.done
                            }
                        }
                        "throw" === u.type && (r = d, n.method = "throw", n.arg = u.arg)
                    }
                }
            }(t, n, s), o
        }

        function c(t, e, n) {
            try {
                return {
                    type: "normal",
                    arg: t.call(e, n)
                }
            } catch (t) {
                return {
                    type: "throw",
                    arg: t
                }
            }
        }
        t.wrap = u;
        var h = "suspendedStart",
            f = "suspendedYield",
            l = "executing",
            d = "completed",
            p = {};

        function g() {}

        function y() {}

        function w() {}
        var v = {};
        v[o] = function() {
            return this
        };
        var b = Object.getPrototypeOf,
            m = b && b(b(O([])));
        m && m !== n && r.call(m, o) && (v = m);
        var _ = w.prototype = g.prototype = Object.create(v);

        function k(t) {
            ["next", "throw", "return"].forEach((function(e) {
                t[e] = function(t) {
                    return this._invoke(e, t)
                }
            }))
        }

        function S(t) {
            var e;
            this._invoke = function(n, i) {
                function o() {
                    return new Promise((function(e, o) {
                        ! function e(n, i, o, s) {
                            var a = c(t[n], t, i);
                            if ("throw" !== a.type) {
                                var u = a.arg,
                                    h = u.value;
                                return h && "object" == typeof h && r.call(h, "__await") ? Promise.resolve(h.__await).then((function(t) {
                                    e("next", t, o, s)
                                }), (function(t) {
                                    e("throw", t, o, s)
                                })) : Promise.resolve(h).then((function(t) {
                                    u.value = t, o(u)
                                }), (function(t) {
                                    return e("throw", t, o, s)
                                }))
                            }
                            s(a.arg)
                        }(n, i, e, o)
                    }))
                }
                return e = e ? e.then(o, o) : o()
            }
        }

        function A(t, n) {
            var r = t.iterator[n.method];
            if (r === e) {
                if (n.delegate = null, "throw" === n.method) {
                    if (t.iterator.return && (n.method = "return", n.arg = e, A(t, n), "throw" === n.method)) return p;
                    n.method = "throw", n.arg = new TypeError("The iterator does not provide a 'throw' method")
                }
                return p
            }
            var i = c(r, t.iterator, n.arg);
            if ("throw" === i.type) return n.method = "throw", n.arg = i.arg, n.delegate = null, p;
            var o = i.arg;
            return o ? o.done ? (n[t.resultName] = o.value, n.next = t.nextLoc, "return" !== n.method && (n.method = "next", n.arg = e), n.delegate = null, p) : o : (n.method = "throw", n.arg = new TypeError("iterator result is not an object"), n.delegate = null, p)
        }

        function E(t) {
            var e = {
                tryLoc: t[0]
            };
            1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e)
        }

        function x(t) {
            var e = t.completion || {};
            e.type = "normal", delete e.arg, t.completion = e
        }

        function P(t) {
            this.tryEntries = [{
                tryLoc: "root"
            }], t.forEach(E, this), this.reset(!0)
        }

        function O(t) {
            if (t) {
                var n = t[o];
                if (n) return n.call(t);
                if ("function" == typeof t.next) return t;
                if (!isNaN(t.length)) {
                    var i = -1,
                        s = function n() {
                            for (; ++i < t.length;)
                                if (r.call(t, i)) return n.value = t[i], n.done = !1, n;
                            return n.value = e, n.done = !0, n
                        };
                    return s.next = s
                }
            }
            return {
                next: T
            }
        }

        function T() {
            return {
                value: e,
                done: !0
            }
        }
        return y.prototype = _.constructor = w, w.constructor = y, w[a] = y.displayName = "GeneratorFunction", t.isGeneratorFunction = function(t) {
            var e = "function" == typeof t && t.constructor;
            return !!e && (e === y || "GeneratorFunction" === (e.displayName || e.name))
        }, t.mark = function(t) {
            return Object.setPrototypeOf ? Object.setPrototypeOf(t, w) : (t.__proto__ = w, a in t || (t[a] = "GeneratorFunction")), t.prototype = Object.create(_), t
        }, t.awrap = function(t) {
            return {
                __await: t
            }
        }, k(S.prototype), S.prototype[s] = function() {
            return this
        }, t.AsyncIterator = S, t.async = function(e, n, r, i) {
            var o = new S(u(e, n, r, i));
            return t.isGeneratorFunction(n) ? o : o.next().then((function(t) {
                return t.done ? t.value : o.next()
            }))
        }, k(_), _[a] = "Generator", _[o] = function() {
            return this
        }, _.toString = function() {
            return "[object Generator]"
        }, t.keys = function(t) {
            var e = [];
            for (var n in t) e.push(n);
            return e.reverse(),
                function n() {
                    for (; e.length;) {
                        var r = e.pop();
                        if (r in t) return n.value = r, n.done = !1, n
                    }
                    return n.done = !0, n
                }
        }, t.values = O, P.prototype = {
            constructor: P,
            reset: function(t) {
                if (this.prev = 0, this.next = 0, this.sent = this._sent = e, this.done = !1, this.delegate = null, this.method = "next", this.arg = e, this.tryEntries.forEach(x), !t)
                    for (var n in this) "t" === n.charAt(0) && r.call(this, n) && !isNaN(+n.slice(1)) && (this[n] = e)
            },
            stop: function() {
                this.done = !0;
                var t = this.tryEntries[0].completion;
                if ("throw" === t.type) throw t.arg;
                return this.rval
            },
            dispatchException: function(t) {
                if (this.done) throw t;
                var n = this;

                function i(r, i) {
                    return a.type = "throw", a.arg = t, n.next = r, i && (n.method = "next", n.arg = e), !!i
                }
                for (var o = this.tryEntries.length - 1; o >= 0; --o) {
                    var s = this.tryEntries[o],
                        a = s.completion;
                    if ("root" === s.tryLoc) return i("end");
                    if (s.tryLoc <= this.prev) {
                        var u = r.call(s, "catchLoc"),
                            c = r.call(s, "finallyLoc");
                        if (u && c) {
                            if (this.prev < s.catchLoc) return i(s.catchLoc, !0);
                            if (this.prev < s.finallyLoc) return i(s.finallyLoc)
                        } else if (u) {
                            if (this.prev < s.catchLoc) return i(s.catchLoc, !0)
                        } else {
                            if (!c) throw new Error("try statement without catch or finally");
                            if (this.prev < s.finallyLoc) return i(s.finallyLoc)
                        }
                    }
                }
            },
            abrupt: function(t, e) {
                for (var n = this.tryEntries.length - 1; n >= 0; --n) {
                    var i = this.tryEntries[n];
                    if (i.tryLoc <= this.prev && r.call(i, "finallyLoc") && this.prev < i.finallyLoc) {
                        var o = i;
                        break
                    }
                }
                o && ("break" === t || "continue" === t) && o.tryLoc <= e && e <= o.finallyLoc && (o = null);
                var s = o ? o.completion : {};
                return s.type = t, s.arg = e, o ? (this.method = "next", this.next = o.finallyLoc, p) : this.complete(s)
            },
            complete: function(t, e) {
                if ("throw" === t.type) throw t.arg;
                return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), p
            },
            finish: function(t) {
                for (var e = this.tryEntries.length - 1; e >= 0; --e) {
                    var n = this.tryEntries[e];
                    if (n.finallyLoc === t) return this.complete(n.completion, n.afterLoc), x(n), p
                }
            },
            catch: function(t) {
                for (var e = this.tryEntries.length - 1; e >= 0; --e) {
                    var n = this.tryEntries[e];
                    if (n.tryLoc === t) {
                        var r = n.completion;
                        if ("throw" === r.type) {
                            var i = r.arg;
                            x(n)
                        }
                        return i
                    }
                }
                throw new Error("illegal catch attempt")
            },
            delegateYield: function(t, n, r) {
                return this.delegate = {
                    iterator: O(t),
                    resultName: n,
                    nextLoc: r
                }, "next" === this.method && (this.arg = e), p
            }
        }, t
    }(t.exports);
    try {
        regeneratorRuntime = r
    } catch (t) {
        Function("r", "regeneratorRuntime = r")(r)
    }
}, function(t, e, n) {
    "use strict";
    (function(e) {
        void 0 === e || !e.version || 0 === e.version.indexOf("v0.") || 0 === e.version.indexOf("v1.") && 0 !== e.version.indexOf("v1.8.") ? t.exports = {
            nextTick: function(t, n, r, i) {
                if ("function" != typeof t) throw new TypeError('"callback" argument must be a function');
                var o, s, a = arguments.length;
                switch (a) {
                    case 0:
                    case 1:
                        return e.nextTick(t);
                    case 2:
                        return e.nextTick((function() {
                            t.call(null, n)
                        }));
                    case 3:
                        return e.nextTick((function() {
                            t.call(null, n, r)
                        }));
                    case 4:
                        return e.nextTick((function() {
                            t.call(null, n, r, i)
                        }));
                    default:
                        for (o = new Array(a - 1), s = 0; s < o.length;) o[s++] = arguments[s];
                        return e.nextTick((function() {
                            t.apply(null, o)
                        }))
                }
            }
        } : t.exports = e
    }).call(this, n(18))
}, function(t, e) {
    var n = {}.toString;
    t.exports = Array.isArray || function(t) {
        return "[object Array]" == n.call(t)
    }
}, function(t, e, n) {
    t.exports = i;
    var r = n(15).EventEmitter;

    function i() {
        r.call(this)
    }
    n(17)(i, r), i.Readable = n(31), i.Writable = n(60), i.Duplex = n(61), i.Transform = n(62), i.PassThrough = n(63), i.Stream = i, i.prototype.pipe = function(t, e) {
        var n = this;

        function i(e) {
            t.writable && !1 === t.write(e) && n.pause && n.pause()
        }

        function o() {
            n.readable && n.resume && n.resume()
        }
        n.on("data", i), t.on("drain", o), t._isStdio || e && !1 === e.end || (n.on("end", a), n.on("close", u));
        var s = !1;

        function a() {
            s || (s = !0, t.end())
        }

        function u() {
            s || (s = !0, "function" == typeof t.destroy && t.destroy())
        }

        function c(t) {
            if (h(), 0 === r.listenerCount(this, "error")) throw t
        }

        function h() {
            n.removeListener("data", i), t.removeListener("drain", o), n.removeListener("end", a), n.removeListener("close", u), n.removeListener("error", c), t.removeListener("error", c), n.removeListener("end", h), n.removeListener("close", h), t.removeListener("close", h)
        }
        return n.on("error", c), t.on("error", c), n.on("end", h), n.on("close", h), t.on("close", h), t.emit("pipe", n), t
    }
}, function(t, e, n) {
    (e = t.exports = n(41)).Stream = e, e.Readable = e, e.Writable = n(33), e.Duplex = n(14), e.Transform = n(44), e.PassThrough = n(59)
}, function(t, e, n) {
    var r = n(12),
        i = r.Buffer;

    function o(t, e) {
        for (var n in t) e[n] = t[n]
    }

    function s(t, e, n) {
        return i(t, e, n)
    }
    i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t.exports = r : (o(r, e), e.Buffer = s), o(i, s), s.from = function(t, e, n) {
        if ("number" == typeof t) throw new TypeError("Argument must not be a number");
        return i(t, e, n)
    }, s.alloc = function(t, e, n) {
        if ("number" != typeof t) throw new TypeError("Argument must be a number");
        var r = i(t);
        return void 0 !== e ? "string" == typeof n ? r.fill(e, n) : r.fill(e) : r.fill(0), r
    }, s.allocUnsafe = function(t) {
        if ("number" != typeof t) throw new TypeError("Argument must be a number");
        return i(t)
    }, s.allocUnsafeSlow = function(t) {
        if ("number" != typeof t) throw new TypeError("Argument must be a number");
        return r.SlowBuffer(t)
    }
}, function(t, e, n) {
    "use strict";
    (function(e, r, i) {
        var o = n(28);

        function s(t) {
            var e = this;
            this.next = null, this.entry = null, this.finish = function() {
                ! function(t, e, n) {
                    var r = t.entry;
                    t.entry = null;
                    for (; r;) {
                        var i = r.callback;
                        e.pendingcb--, i(n), r = r.next
                    }
                    e.corkedRequestsFree ? e.corkedRequestsFree.next = t : e.corkedRequestsFree = t
                }(e, t)
            }
        }
        t.exports = v;
        var a, u = !e.browser && ["v0.10", "v0.9."].indexOf(e.version.slice(0, 5)) > -1 ? r : o.nextTick;
        v.WritableState = w;
        var c = n(22);
        c.inherits = n(17);
        var h = {
                deprecate: n(57)
            },
            f = n(42),
            l = n(32).Buffer,
            d = i.Uint8Array || function() {};
        var p, g = n(43);

        function y() {}

        function w(t, e) {
            a = a || n(14), t = t || {};
            var r = e instanceof a;
            this.objectMode = !!t.objectMode, r && (this.objectMode = this.objectMode || !!t.writableObjectMode);
            var i = t.highWaterMark,
                c = t.writableHighWaterMark,
                h = this.objectMode ? 16 : 16384;
            this.highWaterMark = i || 0 === i ? i : r && (c || 0 === c) ? c : h, this.highWaterMark = Math.floor(this.highWaterMark), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
            var f = !1 === t.decodeStrings;
            this.decodeStrings = !f, this.defaultEncoding = t.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(t) {
                ! function(t, e) {
                    var n = t._writableState,
                        r = n.sync,
                        i = n.writecb;
                    if (function(t) {
                            t.writing = !1, t.writecb = null, t.length -= t.writelen, t.writelen = 0
                        }(n), e) ! function(t, e, n, r, i) {
                        --e.pendingcb, n ? (o.nextTick(i, r), o.nextTick(A, t, e), t._writableState.errorEmitted = !0, t.emit("error", r)) : (i(r), t._writableState.errorEmitted = !0, t.emit("error", r), A(t, e))
                    }(t, n, r, e, i);
                    else {
                        var s = k(n);
                        s || n.corked || n.bufferProcessing || !n.bufferedRequest || _(t, n), r ? u(m, t, n, s, i) : m(t, n, s, i)
                    }
                }(e, t)
            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.bufferedRequestCount = 0, this.corkedRequestsFree = new s(this)
        }

        function v(t) {
            if (a = a || n(14), !(p.call(v, this) || this instanceof a)) return new v(t);
            this._writableState = new w(t, this), this.writable = !0, t && ("function" == typeof t.write && (this._write = t.write), "function" == typeof t.writev && (this._writev = t.writev), "function" == typeof t.destroy && (this._destroy = t.destroy), "function" == typeof t.final && (this._final = t.final)), f.call(this)
        }

        function b(t, e, n, r, i, o, s) {
            e.writelen = r, e.writecb = s, e.writing = !0, e.sync = !0, n ? t._writev(i, e.onwrite) : t._write(i, o, e.onwrite), e.sync = !1
        }

        function m(t, e, n, r) {
            n || function(t, e) {
                0 === e.length && e.needDrain && (e.needDrain = !1, t.emit("drain"))
            }(t, e), e.pendingcb--, r(), A(t, e)
        }

        function _(t, e) {
            e.bufferProcessing = !0;
            var n = e.bufferedRequest;
            if (t._writev && n && n.next) {
                var r = e.bufferedRequestCount,
                    i = new Array(r),
                    o = e.corkedRequestsFree;
                o.entry = n;
                for (var a = 0, u = !0; n;) i[a] = n, n.isBuf || (u = !1), n = n.next, a += 1;
                i.allBuffers = u, b(t, e, !0, e.length, i, "", o.finish), e.pendingcb++, e.lastBufferedRequest = null, o.next ? (e.corkedRequestsFree = o.next, o.next = null) : e.corkedRequestsFree = new s(e), e.bufferedRequestCount = 0
            } else {
                for (; n;) {
                    var c = n.chunk,
                        h = n.encoding,
                        f = n.callback;
                    if (b(t, e, !1, e.objectMode ? 1 : c.length, c, h, f), n = n.next, e.bufferedRequestCount--, e.writing) break
                }
                null === n && (e.lastBufferedRequest = null)
            }
            e.bufferedRequest = n, e.bufferProcessing = !1
        }

        function k(t) {
            return t.ending && 0 === t.length && null === t.bufferedRequest && !t.finished && !t.writing
        }

        function S(t, e) {
            t._final((function(n) {
                e.pendingcb--, n && t.emit("error", n), e.prefinished = !0, t.emit("prefinish"), A(t, e)
            }))
        }

        function A(t, e) {
            var n = k(e);
            return n && (! function(t, e) {
                e.prefinished || e.finalCalled || ("function" == typeof t._final ? (e.pendingcb++, e.finalCalled = !0, o.nextTick(S, t, e)) : (e.prefinished = !0, t.emit("prefinish")))
            }(t, e), 0 === e.pendingcb && (e.finished = !0, t.emit("finish"))), n
        }
        c.inherits(v, f), w.prototype.getBuffer = function() {
                for (var t = this.bufferedRequest, e = []; t;) e.push(t), t = t.next;
                return e
            },
            function() {
                try {
                    Object.defineProperty(w.prototype, "buffer", {
                        get: h.deprecate((function() {
                            return this.getBuffer()
                        }), "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                    })
                } catch (t) {}
            }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (p = Function.prototype[Symbol.hasInstance], Object.defineProperty(v, Symbol.hasInstance, {
                value: function(t) {
                    return !!p.call(this, t) || this === v && (t && t._writableState instanceof w)
                }
            })) : p = function(t) {
                return t instanceof this
            }, v.prototype.pipe = function() {
                this.emit("error", new Error("Cannot pipe, not readable"))
            }, v.prototype.write = function(t, e, n) {
                var r, i = this._writableState,
                    s = !1,
                    a = !i.objectMode && (r = t, l.isBuffer(r) || r instanceof d);
                return a && !l.isBuffer(t) && (t = function(t) {
                    return l.from(t)
                }(t)), "function" == typeof e && (n = e, e = null), a ? e = "buffer" : e || (e = i.defaultEncoding), "function" != typeof n && (n = y), i.ended ? function(t, e) {
                    var n = new Error("write after end");
                    t.emit("error", n), o.nextTick(e, n)
                }(this, n) : (a || function(t, e, n, r) {
                    var i = !0,
                        s = !1;
                    return null === n ? s = new TypeError("May not write null values to stream") : "string" == typeof n || void 0 === n || e.objectMode || (s = new TypeError("Invalid non-string/buffer chunk")), s && (t.emit("error", s), o.nextTick(r, s), i = !1), i
                }(this, i, t, n)) && (i.pendingcb++, s = function(t, e, n, r, i, o) {
                    if (!n) {
                        var s = function(t, e, n) {
                            t.objectMode || !1 === t.decodeStrings || "string" != typeof e || (e = l.from(e, n));
                            return e
                        }(e, r, i);
                        r !== s && (n = !0, i = "buffer", r = s)
                    }
                    var a = e.objectMode ? 1 : r.length;
                    e.length += a;
                    var u = e.length < e.highWaterMark;
                    u || (e.needDrain = !0);
                    if (e.writing || e.corked) {
                        var c = e.lastBufferedRequest;
                        e.lastBufferedRequest = {
                            chunk: r,
                            encoding: i,
                            isBuf: n,
                            callback: o,
                            next: null
                        }, c ? c.next = e.lastBufferedRequest : e.bufferedRequest = e.lastBufferedRequest, e.bufferedRequestCount += 1
                    } else b(t, e, !1, a, r, i, o);
                    return u
                }(this, i, a, t, e, n)), s
            }, v.prototype.cork = function() {
                this._writableState.corked++
            }, v.prototype.uncork = function() {
                var t = this._writableState;
                t.corked && (t.corked--, t.writing || t.corked || t.finished || t.bufferProcessing || !t.bufferedRequest || _(this, t))
            }, v.prototype.setDefaultEncoding = function(t) {
                if ("string" == typeof t && (t = t.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((t + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + t);
                return this._writableState.defaultEncoding = t, this
            }, Object.defineProperty(v.prototype, "writableHighWaterMark", {
                enumerable: !1,
                get: function() {
                    return this._writableState.highWaterMark
                }
            }), v.prototype._write = function(t, e, n) {
                n(new Error("_write() is not implemented"))
            }, v.prototype._writev = null, v.prototype.end = function(t, e, n) {
                var r = this._writableState;
                "function" == typeof t ? (n = t, t = null, e = null) : "function" == typeof e && (n = e, e = null), null != t && this.write(t, e), r.corked && (r.corked = 1, this.uncork()), r.ending || r.finished || function(t, e, n) {
                    e.ending = !0, A(t, e), n && (e.finished ? o.nextTick(n) : t.once("finish", n));
                    e.ended = !0, t.writable = !1
                }(this, r, n)
            }, Object.defineProperty(v.prototype, "destroyed", {
                get: function() {
                    return void 0 !== this._writableState && this._writableState.destroyed
                },
                set: function(t) {
                    this._writableState && (this._writableState.destroyed = t)
                }
            }), v.prototype.destroy = g.destroy, v.prototype._undestroy = g.undestroy, v.prototype._destroy = function(t, e) {
                this.end(), e(t)
            }
    }).call(this, n(18), n(48).setImmediate, n(7))
}, function(t, e, n) {
    "use strict";
    var r = n(58).Buffer,
        i = r.isEncoding || function(t) {
            switch ((t = "" + t) && t.toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                case "raw":
                    return !0;
                default:
                    return !1
            }
        };

    function o(t) {
        var e;
        switch (this.encoding = function(t) {
            var e = function(t) {
                if (!t) return "utf8";
                for (var e;;) switch (t) {
                    case "utf8":
                    case "utf-8":
                        return "utf8";
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return "utf16le";
                    case "latin1":
                    case "binary":
                        return "latin1";
                    case "base64":
                    case "ascii":
                    case "hex":
                        return t;
                    default:
                        if (e) return;
                        t = ("" + t).toLowerCase(), e = !0
                }
            }(t);
            if ("string" != typeof e && (r.isEncoding === i || !i(t))) throw new Error("Unknown encoding: " + t);
            return e || t
        }(t), this.encoding) {
            case "utf16le":
                this.text = u, this.end = c, e = 4;
                break;
            case "utf8":
                this.fillLast = a, e = 4;
                break;
            case "base64":
                this.text = h, this.end = f, e = 3;
                break;
            default:
                return this.write = l, void(this.end = d)
        }
        this.lastNeed = 0, this.lastTotal = 0, this.lastChar = r.allocUnsafe(e)
    }

    function s(t) {
        return t <= 127 ? 0 : t >> 5 == 6 ? 2 : t >> 4 == 14 ? 3 : t >> 3 == 30 ? 4 : t >> 6 == 2 ? -1 : -2
    }

    function a(t) {
        var e = this.lastTotal - this.lastNeed,
            n = function(t, e, n) {
                if (128 != (192 & e[0])) return t.lastNeed = 0, "�";
                if (t.lastNeed > 1 && e.length > 1) {
                    if (128 != (192 & e[1])) return t.lastNeed = 1, "�";
                    if (t.lastNeed > 2 && e.length > 2 && 128 != (192 & e[2])) return t.lastNeed = 2, "�"
                }
            }(this, t);
        return void 0 !== n ? n : this.lastNeed <= t.length ? (t.copy(this.lastChar, e, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (t.copy(this.lastChar, e, 0, t.length), void(this.lastNeed -= t.length))
    }

    function u(t, e) {
        if ((t.length - e) % 2 == 0) {
            var n = t.toString("utf16le", e);
            if (n) {
                var r = n.charCodeAt(n.length - 1);
                if (r >= 55296 && r <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = t[t.length - 2], this.lastChar[1] = t[t.length - 1], n.slice(0, -1)
            }
            return n
        }
        return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = t[t.length - 1], t.toString("utf16le", e, t.length - 1)
    }

    function c(t) {
        var e = t && t.length ? this.write(t) : "";
        if (this.lastNeed) {
            var n = this.lastTotal - this.lastNeed;
            return e + this.lastChar.toString("utf16le", 0, n)
        }
        return e
    }

    function h(t, e) {
        var n = (t.length - e) % 3;
        return 0 === n ? t.toString("base64", e) : (this.lastNeed = 3 - n, this.lastTotal = 3, 1 === n ? this.lastChar[0] = t[t.length - 1] : (this.lastChar[0] = t[t.length - 2], this.lastChar[1] = t[t.length - 1]), t.toString("base64", e, t.length - n))
    }

    function f(t) {
        var e = t && t.length ? this.write(t) : "";
        return this.lastNeed ? e + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : e
    }

    function l(t) {
        return t.toString(this.encoding)
    }

    function d(t) {
        return t && t.length ? this.write(t) : ""
    }
    e.StringDecoder = o, o.prototype.write = function(t) {
        if (0 === t.length) return "";
        var e, n;
        if (this.lastNeed) {
            if (void 0 === (e = this.fillLast(t))) return "";
            n = this.lastNeed, this.lastNeed = 0
        } else n = 0;
        return n < t.length ? e ? e + this.text(t, n) : this.text(t, n) : e || ""
    }, o.prototype.end = function(t) {
        var e = t && t.length ? this.write(t) : "";
        return this.lastNeed ? e + "�" : e
    }, o.prototype.text = function(t, e) {
        var n = function(t, e, n) {
            var r = e.length - 1;
            if (r < n) return 0;
            var i = s(e[r]);
            if (i >= 0) return i > 0 && (t.lastNeed = i - 1), i;
            if (--r < n || -2 === i) return 0;
            if ((i = s(e[r])) >= 0) return i > 0 && (t.lastNeed = i - 2), i;
            if (--r < n || -2 === i) return 0;
            if ((i = s(e[r])) >= 0) return i > 0 && (2 === i ? i = 0 : t.lastNeed = i - 3), i;
            return 0
        }(this, t, e);
        if (!this.lastNeed) return t.toString("utf8", e);
        this.lastTotal = n;
        var r = t.length - (n - this.lastNeed);
        return t.copy(this.lastChar, 0, r), t.toString("utf8", e, r)
    }, o.prototype.fillLast = function(t) {
        if (this.lastNeed <= t.length) return t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
        t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t.length), this.lastNeed -= t.length
    }
}, , , function(t, e, n) {
    var r = n(25).Buffer;

    function i(t, e) {
        this._block = r.alloc(t), this._finalSize = e, this._blockSize = t, this._len = 0
    }
    i.prototype.update = function(t, e) {
        "string" == typeof t && (e = e || "utf8", t = r.from(t, e));
        for (var n = this._block, i = this._blockSize, o = t.length, s = this._len, a = 0; a < o;) {
            for (var u = s % i, c = Math.min(o - a, i - u), h = 0; h < c; h++) n[u + h] = t[a + h];
            a += c, (s += c) % i == 0 && this._update(n)
        }
        return this._len += o, this
    }, i.prototype.digest = function(t) {
        var e = this._len % this._blockSize;
        this._block[e] = 128, this._block.fill(0, e + 1), e >= this._finalSize && (this._update(this._block), this._block.fill(0));
        var n = 8 * this._len;
        if (n <= 4294967295) this._block.writeUInt32BE(n, this._blockSize - 4);
        else {
            var r = (4294967295 & n) >>> 0,
                i = (n - r) / 4294967296;
            this._block.writeUInt32BE(i, this._blockSize - 8), this._block.writeUInt32BE(r, this._blockSize - 4)
        }
        this._update(this._block);
        var o = this._hash();
        return t ? o.toString(t) : o
    }, i.prototype._update = function() {
        throw new Error("_update must be implemented by subclass")
    }, t.exports = i
}, , function(t, e, n) {
    "use strict";
    e.byteLength = function(t) {
        var e = c(t),
            n = e[0],
            r = e[1];
        return 3 * (n + r) / 4 - r
    }, e.toByteArray = function(t) {
        for (var e, n = c(t), r = n[0], s = n[1], a = new o(function(t, e, n) {
                return 3 * (e + n) / 4 - n
            }(0, r, s)), u = 0, h = s > 0 ? r - 4 : r, f = 0; f < h; f += 4) e = i[t.charCodeAt(f)] << 18 | i[t.charCodeAt(f + 1)] << 12 | i[t.charCodeAt(f + 2)] << 6 | i[t.charCodeAt(f + 3)], a[u++] = e >> 16 & 255, a[u++] = e >> 8 & 255, a[u++] = 255 & e;
        2 === s && (e = i[t.charCodeAt(f)] << 2 | i[t.charCodeAt(f + 1)] >> 4, a[u++] = 255 & e);
        1 === s && (e = i[t.charCodeAt(f)] << 10 | i[t.charCodeAt(f + 1)] << 4 | i[t.charCodeAt(f + 2)] >> 2, a[u++] = e >> 8 & 255, a[u++] = 255 & e);
        return a
    }, e.fromByteArray = function(t) {
        for (var e, n = t.length, i = n % 3, o = [], s = 0, a = n - i; s < a; s += 16383) o.push(h(t, s, s + 16383 > a ? a : s + 16383));
        1 === i ? (e = t[n - 1], o.push(r[e >> 2] + r[e << 4 & 63] + "==")) : 2 === i && (e = (t[n - 2] << 8) + t[n - 1], o.push(r[e >> 10] + r[e >> 4 & 63] + r[e << 2 & 63] + "="));
        return o.join("")
    };
    for (var r = [], i = [], o = "undefined" != typeof Uint8Array ? Uint8Array : Array, s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, u = s.length; a < u; ++a) r[a] = s[a], i[s.charCodeAt(a)] = a;

    function c(t) {
        var e = t.length;
        if (e % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
        var n = t.indexOf("=");
        return -1 === n && (n = e), [n, n === e ? 0 : 4 - n % 4]
    }

    function h(t, e, n) {
        for (var i, o, s = [], a = e; a < n; a += 3) i = (t[a] << 16 & 16711680) + (t[a + 1] << 8 & 65280) + (255 & t[a + 2]), s.push(r[(o = i) >> 18 & 63] + r[o >> 12 & 63] + r[o >> 6 & 63] + r[63 & o]);
        return s.join("")
    }
    i["-".charCodeAt(0)] = 62, i["_".charCodeAt(0)] = 63
}, function(t, e) {
    e.read = function(t, e, n, r, i) {
        var o, s, a = 8 * i - r - 1,
            u = (1 << a) - 1,
            c = u >> 1,
            h = -7,
            f = n ? i - 1 : 0,
            l = n ? -1 : 1,
            d = t[e + f];
        for (f += l, o = d & (1 << -h) - 1, d >>= -h, h += a; h > 0; o = 256 * o + t[e + f], f += l, h -= 8);
        for (s = o & (1 << -h) - 1, o >>= -h, h += r; h > 0; s = 256 * s + t[e + f], f += l, h -= 8);
        if (0 === o) o = 1 - c;
        else {
            if (o === u) return s ? NaN : 1 / 0 * (d ? -1 : 1);
            s += Math.pow(2, r), o -= c
        }
        return (d ? -1 : 1) * s * Math.pow(2, o - r)
    }, e.write = function(t, e, n, r, i, o) {
        var s, a, u, c = 8 * o - i - 1,
            h = (1 << c) - 1,
            f = h >> 1,
            l = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
            d = r ? 0 : o - 1,
            p = r ? 1 : -1,
            g = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;
        for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (a = isNaN(e) ? 1 : 0, s = h) : (s = Math.floor(Math.log(e) / Math.LN2), e * (u = Math.pow(2, -s)) < 1 && (s--, u *= 2), (e += s + f >= 1 ? l / u : l * Math.pow(2, 1 - f)) * u >= 2 && (s++, u /= 2), s + f >= h ? (a = 0, s = h) : s + f >= 1 ? (a = (e * u - 1) * Math.pow(2, i), s += f) : (a = e * Math.pow(2, f - 1) * Math.pow(2, i), s = 0)); i >= 8; t[n + d] = 255 & a, d += p, a /= 256, i -= 8);
        for (s = s << i | a, c += i; c > 0; t[n + d] = 255 & s, d += p, s /= 256, c -= 8);
        t[n + d - p] |= 128 * g
    }
}, function(t, e, n) {
    "use strict";
    (function(e, r) {
        var i = n(28);
        t.exports = b;
        var o, s = n(29);
        b.ReadableState = v;
        n(15).EventEmitter;
        var a = function(t, e) {
                return t.listeners(e).length
            },
            u = n(42),
            c = n(32).Buffer,
            h = e.Uint8Array || function() {};
        var f = n(22);
        f.inherits = n(17);
        var l = n(53),
            d = void 0;
        d = l && l.debuglog ? l.debuglog("stream") : function() {};
        var p, g = n(54),
            y = n(43);
        f.inherits(b, u);
        var w = ["error", "close", "destroy", "pause", "resume"];

        function v(t, e) {
            t = t || {};
            var r = e instanceof(o = o || n(14));
            this.objectMode = !!t.objectMode, r && (this.objectMode = this.objectMode || !!t.readableObjectMode);
            var i = t.highWaterMark,
                s = t.readableHighWaterMark,
                a = this.objectMode ? 16 : 16384;
            this.highWaterMark = i || 0 === i ? i : r && (s || 0 === s) ? s : a, this.highWaterMark = Math.floor(this.highWaterMark), this.buffer = new g, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.destroyed = !1, this.defaultEncoding = t.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, t.encoding && (p || (p = n(34).StringDecoder), this.decoder = new p(t.encoding), this.encoding = t.encoding)
        }

        function b(t) {
            if (o = o || n(14), !(this instanceof b)) return new b(t);
            this._readableState = new v(t, this), this.readable = !0, t && ("function" == typeof t.read && (this._read = t.read), "function" == typeof t.destroy && (this._destroy = t.destroy)), u.call(this)
        }

        function m(t, e, n, r, i) {
            var o, s = t._readableState;
            null === e ? (s.reading = !1, function(t, e) {
                if (e.ended) return;
                if (e.decoder) {
                    var n = e.decoder.end();
                    n && n.length && (e.buffer.push(n), e.length += e.objectMode ? 1 : n.length)
                }
                e.ended = !0, A(t)
            }(t, s)) : (i || (o = function(t, e) {
                var n;
                r = e, c.isBuffer(r) || r instanceof h || "string" == typeof e || void 0 === e || t.objectMode || (n = new TypeError("Invalid non-string/buffer chunk"));
                var r;
                return n
            }(s, e)), o ? t.emit("error", o) : s.objectMode || e && e.length > 0 ? ("string" == typeof e || s.objectMode || Object.getPrototypeOf(e) === c.prototype || (e = function(t) {
                return c.from(t)
            }(e)), r ? s.endEmitted ? t.emit("error", new Error("stream.unshift() after end event")) : _(t, s, e, !0) : s.ended ? t.emit("error", new Error("stream.push() after EOF")) : (s.reading = !1, s.decoder && !n ? (e = s.decoder.write(e), s.objectMode || 0 !== e.length ? _(t, s, e, !1) : x(t, s)) : _(t, s, e, !1))) : r || (s.reading = !1));
            return function(t) {
                return !t.ended && (t.needReadable || t.length < t.highWaterMark || 0 === t.length)
            }(s)
        }

        function _(t, e, n, r) {
            e.flowing && 0 === e.length && !e.sync ? (t.emit("data", n), t.read(0)) : (e.length += e.objectMode ? 1 : n.length, r ? e.buffer.unshift(n) : e.buffer.push(n), e.needReadable && A(t)), x(t, e)
        }
        Object.defineProperty(b.prototype, "destroyed", {
            get: function() {
                return void 0 !== this._readableState && this._readableState.destroyed
            },
            set: function(t) {
                this._readableState && (this._readableState.destroyed = t)
            }
        }), b.prototype.destroy = y.destroy, b.prototype._undestroy = y.undestroy, b.prototype._destroy = function(t, e) {
            this.push(null), e(t)
        }, b.prototype.push = function(t, e) {
            var n, r = this._readableState;
            return r.objectMode ? n = !0 : "string" == typeof t && ((e = e || r.defaultEncoding) !== r.encoding && (t = c.from(t, e), e = ""), n = !0), m(this, t, e, !1, n)
        }, b.prototype.unshift = function(t) {
            return m(this, t, null, !0, !1)
        }, b.prototype.isPaused = function() {
            return !1 === this._readableState.flowing
        }, b.prototype.setEncoding = function(t) {
            return p || (p = n(34).StringDecoder), this._readableState.decoder = new p(t), this._readableState.encoding = t, this
        };
        var k = 8388608;

        function S(t, e) {
            return t <= 0 || 0 === e.length && e.ended ? 0 : e.objectMode ? 1 : t != t ? e.flowing && e.length ? e.buffer.head.data.length : e.length : (t > e.highWaterMark && (e.highWaterMark = function(t) {
                return t >= k ? t = k : (t--, t |= t >>> 1, t |= t >>> 2, t |= t >>> 4, t |= t >>> 8, t |= t >>> 16, t++), t
            }(t)), t <= e.length ? t : e.ended ? e.length : (e.needReadable = !0, 0))
        }

        function A(t) {
            var e = t._readableState;
            e.needReadable = !1, e.emittedReadable || (d("emitReadable", e.flowing), e.emittedReadable = !0, e.sync ? i.nextTick(E, t) : E(t))
        }

        function E(t) {
            d("emit readable"), t.emit("readable"), R(t)
        }

        function x(t, e) {
            e.readingMore || (e.readingMore = !0, i.nextTick(P, t, e))
        }

        function P(t, e) {
            for (var n = e.length; !e.reading && !e.flowing && !e.ended && e.length < e.highWaterMark && (d("maybeReadMore read 0"), t.read(0), n !== e.length);) n = e.length;
            e.readingMore = !1
        }

        function O(t) {
            d("readable nexttick read 0"), t.read(0)
        }

        function T(t, e) {
            e.reading || (d("resume read 0"), t.read(0)), e.resumeScheduled = !1, e.awaitDrain = 0, t.emit("resume"), R(t), e.flowing && !e.reading && t.read(0)
        }

        function R(t) {
            var e = t._readableState;
            for (d("flow", e.flowing); e.flowing && null !== t.read(););
        }

        function I(t, e) {
            return 0 === e.length ? null : (e.objectMode ? n = e.buffer.shift() : !t || t >= e.length ? (n = e.decoder ? e.buffer.join("") : 1 === e.buffer.length ? e.buffer.head.data : e.buffer.concat(e.length), e.buffer.clear()) : n = function(t, e, n) {
                var r;
                t < e.head.data.length ? (r = e.head.data.slice(0, t), e.head.data = e.head.data.slice(t)) : r = t === e.head.data.length ? e.shift() : n ? function(t, e) {
                    var n = e.head,
                        r = 1,
                        i = n.data;
                    t -= i.length;
                    for (; n = n.next;) {
                        var o = n.data,
                            s = t > o.length ? o.length : t;
                        if (s === o.length ? i += o : i += o.slice(0, t), 0 === (t -= s)) {
                            s === o.length ? (++r, n.next ? e.head = n.next : e.head = e.tail = null) : (e.head = n, n.data = o.slice(s));
                            break
                        }++r
                    }
                    return e.length -= r, i
                }(t, e) : function(t, e) {
                    var n = c.allocUnsafe(t),
                        r = e.head,
                        i = 1;
                    r.data.copy(n), t -= r.data.length;
                    for (; r = r.next;) {
                        var o = r.data,
                            s = t > o.length ? o.length : t;
                        if (o.copy(n, n.length - t, 0, s), 0 === (t -= s)) {
                            s === o.length ? (++i, r.next ? e.head = r.next : e.head = e.tail = null) : (e.head = r, r.data = o.slice(s));
                            break
                        }++i
                    }
                    return e.length -= i, n
                }(t, e);
                return r
            }(t, e.buffer, e.decoder), n);
            var n
        }

        function L(t) {
            var e = t._readableState;
            if (e.length > 0) throw new Error('"endReadable()" called on non-empty stream');
            e.endEmitted || (e.ended = !0, i.nextTick(B, e, t))
        }

        function B(t, e) {
            t.endEmitted || 0 !== t.length || (t.endEmitted = !0, e.readable = !1, e.emit("end"))
        }

        function C(t, e) {
            for (var n = 0, r = t.length; n < r; n++)
                if (t[n] === e) return n;
            return -1
        }
        b.prototype.read = function(t) {
            d("read", t), t = parseInt(t, 10);
            var e = this._readableState,
                n = t;
            if (0 !== t && (e.emittedReadable = !1), 0 === t && e.needReadable && (e.length >= e.highWaterMark || e.ended)) return d("read: emitReadable", e.length, e.ended), 0 === e.length && e.ended ? L(this) : A(this), null;
            if (0 === (t = S(t, e)) && e.ended) return 0 === e.length && L(this), null;
            var r, i = e.needReadable;
            return d("need readable", i), (0 === e.length || e.length - t < e.highWaterMark) && d("length less than watermark", i = !0), e.ended || e.reading ? d("reading or ended", i = !1) : i && (d("do read"), e.reading = !0, e.sync = !0, 0 === e.length && (e.needReadable = !0), this._read(e.highWaterMark), e.sync = !1, e.reading || (t = S(n, e))), null === (r = t > 0 ? I(t, e) : null) ? (e.needReadable = !0, t = 0) : e.length -= t, 0 === e.length && (e.ended || (e.needReadable = !0), n !== t && e.ended && L(this)), null !== r && this.emit("data", r), r
        }, b.prototype._read = function(t) {
            this.emit("error", new Error("_read() is not implemented"))
        }, b.prototype.pipe = function(t, e) {
            var n = this,
                o = this._readableState;
            switch (o.pipesCount) {
                case 0:
                    o.pipes = t;
                    break;
                case 1:
                    o.pipes = [o.pipes, t];
                    break;
                default:
                    o.pipes.push(t)
            }
            o.pipesCount += 1, d("pipe count=%d opts=%j", o.pipesCount, e);
            var u = (!e || !1 !== e.end) && t !== r.stdout && t !== r.stderr ? h : b;

            function c(e, r) {
                d("onunpipe"), e === n && r && !1 === r.hasUnpiped && (r.hasUnpiped = !0, d("cleanup"), t.removeListener("close", w), t.removeListener("finish", v), t.removeListener("drain", f), t.removeListener("error", y), t.removeListener("unpipe", c), n.removeListener("end", h), n.removeListener("end", b), n.removeListener("data", g), l = !0, !o.awaitDrain || t._writableState && !t._writableState.needDrain || f())
            }

            function h() {
                d("onend"), t.end()
            }
            o.endEmitted ? i.nextTick(u) : n.once("end", u), t.on("unpipe", c);
            var f = function(t) {
                return function() {
                    var e = t._readableState;
                    d("pipeOnDrain", e.awaitDrain), e.awaitDrain && e.awaitDrain--, 0 === e.awaitDrain && a(t, "data") && (e.flowing = !0, R(t))
                }
            }(n);
            t.on("drain", f);
            var l = !1;
            var p = !1;

            function g(e) {
                d("ondata"), p = !1, !1 !== t.write(e) || p || ((1 === o.pipesCount && o.pipes === t || o.pipesCount > 1 && -1 !== C(o.pipes, t)) && !l && (d("false write response, pause", n._readableState.awaitDrain), n._readableState.awaitDrain++, p = !0), n.pause())
            }

            function y(e) {
                d("onerror", e), b(), t.removeListener("error", y), 0 === a(t, "error") && t.emit("error", e)
            }

            function w() {
                t.removeListener("finish", v), b()
            }

            function v() {
                d("onfinish"), t.removeListener("close", w), b()
            }

            function b() {
                d("unpipe"), n.unpipe(t)
            }
            return n.on("data", g),
                function(t, e, n) {
                    if ("function" == typeof t.prependListener) return t.prependListener(e, n);
                    t._events && t._events[e] ? s(t._events[e]) ? t._events[e].unshift(n) : t._events[e] = [n, t._events[e]] : t.on(e, n)
                }(t, "error", y), t.once("close", w), t.once("finish", v), t.emit("pipe", n), o.flowing || (d("pipe resume"), n.resume()), t
        }, b.prototype.unpipe = function(t) {
            var e = this._readableState,
                n = {
                    hasUnpiped: !1
                };
            if (0 === e.pipesCount) return this;
            if (1 === e.pipesCount) return t && t !== e.pipes ? this : (t || (t = e.pipes), e.pipes = null, e.pipesCount = 0, e.flowing = !1, t && t.emit("unpipe", this, n), this);
            if (!t) {
                var r = e.pipes,
                    i = e.pipesCount;
                e.pipes = null, e.pipesCount = 0, e.flowing = !1;
                for (var o = 0; o < i; o++) r[o].emit("unpipe", this, n);
                return this
            }
            var s = C(e.pipes, t);
            return -1 === s ? this : (e.pipes.splice(s, 1), e.pipesCount -= 1, 1 === e.pipesCount && (e.pipes = e.pipes[0]), t.emit("unpipe", this, n), this)
        }, b.prototype.on = function(t, e) {
            var n = u.prototype.on.call(this, t, e);
            if ("data" === t) !1 !== this._readableState.flowing && this.resume();
            else if ("readable" === t) {
                var r = this._readableState;
                r.endEmitted || r.readableListening || (r.readableListening = r.needReadable = !0, r.emittedReadable = !1, r.reading ? r.length && A(this) : i.nextTick(O, this))
            }
            return n
        }, b.prototype.addListener = b.prototype.on, b.prototype.resume = function() {
            var t = this._readableState;
            return t.flowing || (d("resume"), t.flowing = !0, function(t, e) {
                e.resumeScheduled || (e.resumeScheduled = !0, i.nextTick(T, t, e))
            }(this, t)), this
        }, b.prototype.pause = function() {
            return d("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (d("pause"), this._readableState.flowing = !1, this.emit("pause")), this
        }, b.prototype.wrap = function(t) {
            var e = this,
                n = this._readableState,
                r = !1;
            for (var i in t.on("end", (function() {
                    if (d("wrapped end"), n.decoder && !n.ended) {
                        var t = n.decoder.end();
                        t && t.length && e.push(t)
                    }
                    e.push(null)
                })), t.on("data", (function(i) {
                    (d("wrapped data"), n.decoder && (i = n.decoder.write(i)), n.objectMode && null == i) || (n.objectMode || i && i.length) && (e.push(i) || (r = !0, t.pause()))
                })), t) void 0 === this[i] && "function" == typeof t[i] && (this[i] = function(e) {
                return function() {
                    return t[e].apply(t, arguments)
                }
            }(i));
            for (var o = 0; o < w.length; o++) t.on(w[o], this.emit.bind(this, w[o]));
            return this._read = function(e) {
                d("wrapped _read", e), r && (r = !1, t.resume())
            }, this
        }, Object.defineProperty(b.prototype, "readableHighWaterMark", {
            enumerable: !1,
            get: function() {
                return this._readableState.highWaterMark
            }
        }), b._fromList = I
    }).call(this, n(7), n(18))
}, function(t, e, n) {
    t.exports = n(15).EventEmitter
}, function(t, e, n) {
    "use strict";
    var r = n(28);

    function i(t, e) {
        t.emit("error", e)
    }
    t.exports = {
        destroy: function(t, e) {
            var n = this,
                o = this._readableState && this._readableState.destroyed,
                s = this._writableState && this._writableState.destroyed;
            return o || s ? (e ? e(t) : !t || this._writableState && this._writableState.errorEmitted || r.nextTick(i, this, t), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(t || null, (function(t) {
                !e && t ? (r.nextTick(i, n, t), n._writableState && (n._writableState.errorEmitted = !0)) : e && e(t)
            })), this)
        },
        undestroy: function() {
            this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1)
        }
    }
}, function(t, e, n) {
    "use strict";
    t.exports = s;
    var r = n(14),
        i = n(22);

    function o(t, e) {
        var n = this._transformState;
        n.transforming = !1;
        var r = n.writecb;
        if (!r) return this.emit("error", new Error("write callback called multiple times"));
        n.writechunk = null, n.writecb = null, null != e && this.push(e), r(t);
        var i = this._readableState;
        i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark)
    }

    function s(t) {
        if (!(this instanceof s)) return new s(t);
        r.call(this, t), this._transformState = {
            afterTransform: o.bind(this),
            needTransform: !1,
            transforming: !1,
            writecb: null,
            writechunk: null,
            writeencoding: null
        }, this._readableState.needReadable = !0, this._readableState.sync = !1, t && ("function" == typeof t.transform && (this._transform = t.transform), "function" == typeof t.flush && (this._flush = t.flush)), this.on("prefinish", a)
    }

    function a() {
        var t = this;
        "function" == typeof this._flush ? this._flush((function(e, n) {
            u(t, e, n)
        })) : u(this, null, null)
    }

    function u(t, e, n) {
        if (e) return t.emit("error", e);
        if (null != n && t.push(n), t._writableState.length) throw new Error("Calling transform done when ws.length != 0");
        if (t._transformState.transforming) throw new Error("Calling transform done when still transforming");
        return t.push(null)
    }
    i.inherits = n(17), i.inherits(s, r), s.prototype.push = function(t, e) {
        return this._transformState.needTransform = !1, r.prototype.push.call(this, t, e)
    }, s.prototype._transform = function(t, e, n) {
        throw new Error("_transform() is not implemented")
    }, s.prototype._write = function(t, e, n) {
        var r = this._transformState;
        if (r.writecb = n, r.writechunk = t, r.writeencoding = e, !r.transforming) {
            var i = this._readableState;
            (r.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark)
        }
    }, s.prototype._read = function(t) {
        var e = this._transformState;
        null !== e.writechunk && e.writecb && !e.transforming ? (e.transforming = !0, this._transform(e.writechunk, e.writeencoding, e.afterTransform)) : e.needTransform = !0
    }, s.prototype._destroy = function(t, e) {
        var n = this;
        r.prototype._destroy.call(this, t, (function(t) {
            e(t), n.emit("close")
        }))
    }
}, , , , function(t, e, n) {
    (function(t) {
        var r = void 0 !== t && t || "undefined" != typeof self && self || window,
            i = Function.prototype.apply;

        function o(t, e) {
            this._id = t, this._clearFn = e
        }
        e.setTimeout = function() {
            return new o(i.call(setTimeout, r, arguments), clearTimeout)
        }, e.setInterval = function() {
            return new o(i.call(setInterval, r, arguments), clearInterval)
        }, e.clearTimeout = e.clearInterval = function(t) {
            t && t.close()
        }, o.prototype.unref = o.prototype.ref = function() {}, o.prototype.close = function() {
            this._clearFn.call(r, this._id)
        }, e.enroll = function(t, e) {
            clearTimeout(t._idleTimeoutId), t._idleTimeout = e
        }, e.unenroll = function(t) {
            clearTimeout(t._idleTimeoutId), t._idleTimeout = -1
        }, e._unrefActive = e.active = function(t) {
            clearTimeout(t._idleTimeoutId);
            var e = t._idleTimeout;
            e >= 0 && (t._idleTimeoutId = setTimeout((function() {
                t._onTimeout && t._onTimeout()
            }), e))
        }, n(56), e.setImmediate = "undefined" != typeof self && self.setImmediate || void 0 !== t && t.setImmediate || this && this.setImmediate, e.clearImmediate = "undefined" != typeof self && self.clearImmediate || void 0 !== t && t.clearImmediate || this && this.clearImmediate
    }).call(this, n(7))
}, , , , , function(t, e) {}, function(t, e, n) {
    "use strict";
    var r = n(32).Buffer,
        i = n(55);
    t.exports = function() {
        function t() {
            ! function(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")
            }(this, t), this.head = null, this.tail = null, this.length = 0
        }
        return t.prototype.push = function(t) {
            var e = {
                data: t,
                next: null
            };
            this.length > 0 ? this.tail.next = e : this.head = e, this.tail = e, ++this.length
        }, t.prototype.unshift = function(t) {
            var e = {
                data: t,
                next: this.head
            };
            0 === this.length && (this.tail = e), this.head = e, ++this.length
        }, t.prototype.shift = function() {
            if (0 !== this.length) {
                var t = this.head.data;
                return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, t
            }
        }, t.prototype.clear = function() {
            this.head = this.tail = null, this.length = 0
        }, t.prototype.join = function(t) {
            if (0 === this.length) return "";
            for (var e = this.head, n = "" + e.data; e = e.next;) n += t + e.data;
            return n
        }, t.prototype.concat = function(t) {
            if (0 === this.length) return r.alloc(0);
            if (1 === this.length) return this.head.data;
            for (var e, n, i, o = r.allocUnsafe(t >>> 0), s = this.head, a = 0; s;) e = s.data, n = o, i = a, e.copy(n, i), a += s.data.length, s = s.next;
            return o
        }, t
    }(), i && i.inspect && i.inspect.custom && (t.exports.prototype[i.inspect.custom] = function() {
        var t = i.inspect({
            length: this.length
        });
        return this.constructor.name + " " + t
    })
}, function(t, e) {}, function(t, e, n) {
    (function(t, e) {
        ! function(t, n) {
            "use strict";
            if (!t.setImmediate) {
                var r, i, o, s, a, u = 1,
                    c = {},
                    h = !1,
                    f = t.document,
                    l = Object.getPrototypeOf && Object.getPrototypeOf(t);
                l = l && l.setTimeout ? l : t, "[object process]" === {}.toString.call(t.process) ? r = function(t) {
                    e.nextTick((function() {
                        p(t)
                    }))
                } : ! function() {
                    if (t.postMessage && !t.importScripts) {
                        var e = !0,
                            n = t.onmessage;
                        return t.onmessage = function() {
                            e = !1
                        }, t.postMessage("", "*"), t.onmessage = n, e
                    }
                }() ? t.MessageChannel ? ((o = new MessageChannel).port1.onmessage = function(t) {
                    p(t.data)
                }, r = function(t) {
                    o.port2.postMessage(t)
                }) : f && "onreadystatechange" in f.createElement("script") ? (i = f.documentElement, r = function(t) {
                    var e = f.createElement("script");
                    e.onreadystatechange = function() {
                        p(t), e.onreadystatechange = null, i.removeChild(e), e = null
                    }, i.appendChild(e)
                }) : r = function(t) {
                    setTimeout(p, 0, t)
                } : (s = "setImmediate$" + Math.random() + "$", a = function(e) {
                    e.source === t && "string" == typeof e.data && 0 === e.data.indexOf(s) && p(+e.data.slice(s.length))
                }, t.addEventListener ? t.addEventListener("message", a, !1) : t.attachEvent("onmessage", a), r = function(e) {
                    t.postMessage(s + e, "*")
                }), l.setImmediate = function(t) {
                    "function" != typeof t && (t = new Function("" + t));
                    for (var e = new Array(arguments.length - 1), n = 0; n < e.length; n++) e[n] = arguments[n + 1];
                    var i = {
                        callback: t,
                        args: e
                    };
                    return c[u] = i, r(u), u++
                }, l.clearImmediate = d
            }

            function d(t) {
                delete c[t]
            }

            function p(t) {
                if (h) setTimeout(p, 0, t);
                else {
                    var e = c[t];
                    if (e) {
                        h = !0;
                        try {
                            ! function(t) {
                                var e = t.callback,
                                    r = t.args;
                                switch (r.length) {
                                    case 0:
                                        e();
                                        break;
                                    case 1:
                                        e(r[0]);
                                        break;
                                    case 2:
                                        e(r[0], r[1]);
                                        break;
                                    case 3:
                                        e(r[0], r[1], r[2]);
                                        break;
                                    default:
                                        e.apply(n, r)
                                }
                            }(e)
                        } finally {
                            d(t), h = !1
                        }
                    }
                }
            }
        }("undefined" == typeof self ? void 0 === t ? this : t : self)
    }).call(this, n(7), n(18))
}, function(t, e, n) {
    (function(e) {
        function n(t) {
            try {
                if (!e.localStorage) return !1
            } catch (t) {
                return !1
            }
            var n = e.localStorage[t];
            return null != n && "true" === String(n).toLowerCase()
        }
        t.exports = function(t, e) {
            if (n("noDeprecation")) return t;
            var r = !1;
            return function() {
                if (!r) {
                    if (n("throwDeprecation")) throw new Error(e);
                    n("traceDeprecation") ? console.trace(e) : console.warn(e), r = !0
                }
                return t.apply(this, arguments)
            }
        }
    }).call(this, n(7))
}, function(t, e, n) {
    var r = n(12),
        i = r.Buffer;

    function o(t, e) {
        for (var n in t) e[n] = t[n]
    }

    function s(t, e, n) {
        return i(t, e, n)
    }
    i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t.exports = r : (o(r, e), e.Buffer = s), o(i, s), s.from = function(t, e, n) {
        if ("number" == typeof t) throw new TypeError("Argument must not be a number");
        return i(t, e, n)
    }, s.alloc = function(t, e, n) {
        if ("number" != typeof t) throw new TypeError("Argument must be a number");
        var r = i(t);
        return void 0 !== e ? "string" == typeof n ? r.fill(e, n) : r.fill(e) : r.fill(0), r
    }, s.allocUnsafe = function(t) {
        if ("number" != typeof t) throw new TypeError("Argument must be a number");
        return i(t)
    }, s.allocUnsafeSlow = function(t) {
        if ("number" != typeof t) throw new TypeError("Argument must be a number");
        return r.SlowBuffer(t)
    }
}, function(t, e, n) {
    "use strict";
    t.exports = o;
    var r = n(44),
        i = n(22);

    function o(t) {
        if (!(this instanceof o)) return new o(t);
        r.call(this, t)
    }
    i.inherits = n(17), i.inherits(o, r), o.prototype._transform = function(t, e, n) {
        n(null, t)
    }
}, function(t, e, n) {
    t.exports = n(33)
}, function(t, e, n) {
    t.exports = n(14)
}, function(t, e, n) {
    t.exports = n(31).Transform
}, function(t, e, n) {
    t.exports = n(31).PassThrough
}, , , , , , , , , , , , , , function(t, e, n) {
    "use strict";
    var r = n(25).Buffer,
        i = n(30).Transform;

    function o(t) {
        i.call(this), this._block = r.allocUnsafe(t), this._blockSize = t, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = !1
    }
    n(21)(o, i), o.prototype._transform = function(t, e, n) {
        var r = null;
        try {
            this.update(t, e)
        } catch (t) {
            r = t
        }
        n(r)
    }, o.prototype._flush = function(t) {
        var e = null;
        try {
            this.push(this.digest())
        } catch (t) {
            e = t
        }
        t(e)
    }, o.prototype.update = function(t, e) {
        if (function(t, e) {
                if (!r.isBuffer(t) && "string" != typeof t) throw new TypeError(e + " must be a string or a buffer")
            }(t, "Data"), this._finalized) throw new Error("Digest already called");
        r.isBuffer(t) || (t = r.from(t, e));
        for (var n = this._block, i = 0; this._blockOffset + t.length - i >= this._blockSize;) {
            for (var o = this._blockOffset; o < this._blockSize;) n[o++] = t[i++];
            this._update(), this._blockOffset = 0
        }
        for (; i < t.length;) n[this._blockOffset++] = t[i++];
        for (var s = 0, a = 8 * t.length; a > 0; ++s) this._length[s] += a, (a = this._length[s] / 4294967296 | 0) > 0 && (this._length[s] -= 4294967296 * a);
        return this
    }, o.prototype._update = function() {
        throw new Error("_update is not implemented")
    }, o.prototype.digest = function(t) {
        if (this._finalized) throw new Error("Digest already called");
        this._finalized = !0;
        var e = this._digest();
        void 0 !== t && (e = e.toString(t)), this._block.fill(0), this._blockOffset = 0;
        for (var n = 0; n < 4; ++n) this._length[n] = 0;
        return e
    }, o.prototype._digest = function() {
        throw new Error("_digest is not implemented")
    }, t.exports = o
}, function(t, e, n) {
    var r = n(21),
        i = n(37),
        o = n(25).Buffer,
        s = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298],
        a = new Array(64);

    function u() {
        this.init(), this._w = a, i.call(this, 64, 56)
    }

    function c(t, e, n) {
        return n ^ t & (e ^ n)
    }

    function h(t, e, n) {
        return t & e | n & (t | e)
    }

    function f(t) {
        return (t >>> 2 | t << 30) ^ (t >>> 13 | t << 19) ^ (t >>> 22 | t << 10)
    }

    function l(t) {
        return (t >>> 6 | t << 26) ^ (t >>> 11 | t << 21) ^ (t >>> 25 | t << 7)
    }

    function d(t) {
        return (t >>> 7 | t << 25) ^ (t >>> 18 | t << 14) ^ t >>> 3
    }
    r(u, i), u.prototype.init = function() {
        return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this
    }, u.prototype._update = function(t) {
        for (var e, n = this._w, r = 0 | this._a, i = 0 | this._b, o = 0 | this._c, a = 0 | this._d, u = 0 | this._e, p = 0 | this._f, g = 0 | this._g, y = 0 | this._h, w = 0; w < 16; ++w) n[w] = t.readInt32BE(4 * w);
        for (; w < 64; ++w) n[w] = 0 | (((e = n[w - 2]) >>> 17 | e << 15) ^ (e >>> 19 | e << 13) ^ e >>> 10) + n[w - 7] + d(n[w - 15]) + n[w - 16];
        for (var v = 0; v < 64; ++v) {
            var b = y + l(u) + c(u, p, g) + s[v] + n[v] | 0,
                m = f(r) + h(r, i, o) | 0;
            y = g, g = p, p = u, u = a + b | 0, a = o, o = i, i = r, r = b + m | 0
        }
        this._a = r + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = a + this._d | 0, this._e = u + this._e | 0, this._f = p + this._f | 0, this._g = g + this._g | 0, this._h = y + this._h | 0
    }, u.prototype._hash = function() {
        var t = o.allocUnsafe(32);
        return t.writeInt32BE(this._a, 0), t.writeInt32BE(this._b, 4), t.writeInt32BE(this._c, 8), t.writeInt32BE(this._d, 12), t.writeInt32BE(this._e, 16), t.writeInt32BE(this._f, 20), t.writeInt32BE(this._g, 24), t.writeInt32BE(this._h, 28), t
    }, t.exports = u
}, function(t, e, n) {
    var r = n(21),
        i = n(37),
        o = n(25).Buffer,
        s = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591],
        a = new Array(160);

    function u() {
        this.init(), this._w = a, i.call(this, 128, 112)
    }

    function c(t, e, n) {
        return n ^ t & (e ^ n)
    }

    function h(t, e, n) {
        return t & e | n & (t | e)
    }

    function f(t, e) {
        return (t >>> 28 | e << 4) ^ (e >>> 2 | t << 30) ^ (e >>> 7 | t << 25)
    }

    function l(t, e) {
        return (t >>> 14 | e << 18) ^ (t >>> 18 | e << 14) ^ (e >>> 9 | t << 23)
    }

    function d(t, e) {
        return (t >>> 1 | e << 31) ^ (t >>> 8 | e << 24) ^ t >>> 7
    }

    function p(t, e) {
        return (t >>> 1 | e << 31) ^ (t >>> 8 | e << 24) ^ (t >>> 7 | e << 25)
    }

    function g(t, e) {
        return (t >>> 19 | e << 13) ^ (e >>> 29 | t << 3) ^ t >>> 6
    }

    function y(t, e) {
        return (t >>> 19 | e << 13) ^ (e >>> 29 | t << 3) ^ (t >>> 6 | e << 26)
    }

    function w(t, e) {
        return t >>> 0 < e >>> 0 ? 1 : 0
    }
    r(u, i), u.prototype.init = function() {
        return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this
    }, u.prototype._update = function(t) {
        for (var e = this._w, n = 0 | this._ah, r = 0 | this._bh, i = 0 | this._ch, o = 0 | this._dh, a = 0 | this._eh, u = 0 | this._fh, v = 0 | this._gh, b = 0 | this._hh, m = 0 | this._al, _ = 0 | this._bl, k = 0 | this._cl, S = 0 | this._dl, A = 0 | this._el, E = 0 | this._fl, x = 0 | this._gl, P = 0 | this._hl, O = 0; O < 32; O += 2) e[O] = t.readInt32BE(4 * O), e[O + 1] = t.readInt32BE(4 * O + 4);
        for (; O < 160; O += 2) {
            var T = e[O - 30],
                R = e[O - 30 + 1],
                I = d(T, R),
                L = p(R, T),
                B = g(T = e[O - 4], R = e[O - 4 + 1]),
                C = y(R, T),
                M = e[O - 14],
                F = e[O - 14 + 1],
                j = e[O - 32],
                W = e[O - 32 + 1],
                U = L + F | 0,
                D = I + M + w(U, L) | 0;
            D = (D = D + B + w(U = U + C | 0, C) | 0) + j + w(U = U + W | 0, W) | 0, e[O] = D, e[O + 1] = U
        }
        for (var N = 0; N < 160; N += 2) {
            D = e[N], U = e[N + 1];
            var q = h(n, r, i),
                K = h(m, _, k),
                H = f(n, m),
                Y = f(m, n),
                X = l(a, A),
                V = l(A, a),
                J = s[N],
                $ = s[N + 1],
                z = c(a, u, v),
                G = c(A, E, x),
                Q = P + V | 0,
                Z = b + X + w(Q, P) | 0;
            Z = (Z = (Z = Z + z + w(Q = Q + G | 0, G) | 0) + J + w(Q = Q + $ | 0, $) | 0) + D + w(Q = Q + U | 0, U) | 0;
            var tt = Y + K | 0,
                et = H + q + w(tt, Y) | 0;
            b = v, P = x, v = u, x = E, u = a, E = A, a = o + Z + w(A = S + Q | 0, S) | 0, o = i, S = k, i = r, k = _, r = n, _ = m, n = Z + et + w(m = Q + tt | 0, Q) | 0
        }
        this._al = this._al + m | 0, this._bl = this._bl + _ | 0, this._cl = this._cl + k | 0, this._dl = this._dl + S | 0, this._el = this._el + A | 0, this._fl = this._fl + E | 0, this._gl = this._gl + x | 0, this._hl = this._hl + P | 0, this._ah = this._ah + n + w(this._al, m) | 0, this._bh = this._bh + r + w(this._bl, _) | 0, this._ch = this._ch + i + w(this._cl, k) | 0, this._dh = this._dh + o + w(this._dl, S) | 0, this._eh = this._eh + a + w(this._el, A) | 0, this._fh = this._fh + u + w(this._fl, E) | 0, this._gh = this._gh + v + w(this._gl, x) | 0, this._hh = this._hh + b + w(this._hl, P) | 0
    }, u.prototype._hash = function() {
        var t = o.allocUnsafe(64);

        function e(e, n, r) {
            t.writeInt32BE(e, r), t.writeInt32BE(n, r + 4)
        }
        return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), e(this._gh, this._gl, 48), e(this._hh, this._hl, 56), t
    }, t.exports = u
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(t, e, n) {
    var r = n(121),
        i = n(122),
        o = n(123);
    t.exports = function(t) {
        return r(t) || i(t) || o()
    }
}, function(t, e, n) {
    var r = n(124),
        i = n(125),
        o = n(126);
    t.exports = function(t, e) {
        return r(t) || i(t, e) || o()
    }
}, function(t, e, n) {
    var r = n(127),
        i = n(128);
    t.exports = function(t) {
        if (r.crypto && r.crypto.getRandomValues) return r.crypto.getRandomValues(t);
        if ("object" == typeof r.msCrypto && "function" == typeof r.msCrypto.getRandomValues) return r.msCrypto.getRandomValues(t);
        if (i.randomBytes) {
            if (!(t instanceof Uint8Array)) throw new TypeError("expected Uint8Array");
            if (t.length > 65536) {
                var e = new Error;
                throw e.code = 22, e.message = "Failed to execute 'getRandomValues' on 'Crypto': The ArrayBufferView's byte length (" + t.length + ") exceeds the number of bytes of entropy available via this API (65536).", e.name = "QuotaExceededError", e
            }
            var n = i.randomBytes(t.length);
            return t.set(n), t
        }
        throw new Error("No secure random number generator available.")
    }
}, function(t, e, n) {
    "use strict";
    var r = n(21),
        i = n(129),
        o = n(130),
        s = n(131),
        a = n(136);

    function u(t) {
        a.call(this, "digest"), this._hash = t
    }
    r(u, a), u.prototype._update = function(t) {
        this._hash.update(t)
    }, u.prototype._final = function() {
        return this._hash.digest()
    }, t.exports = function(t) {
        return "md5" === (t = t.toLowerCase()) ? new i : "rmd160" === t || "ripemd160" === t ? new o : new u(s(t))
    }
}, function(t, e, n) {
    (function(e) {
        var n = null;
        "undefined" != typeof WebSocket ? n = WebSocket : "undefined" != typeof MozWebSocket ? n = MozWebSocket : void 0 !== e ? n = e.WebSocket || e.MozWebSocket : "undefined" != typeof window ? n = window.WebSocket || window.MozWebSocket : "undefined" != typeof self && (n = self.WebSocket || self.MozWebSocket), t.exports = n
    }).call(this, n(7))
}, , , , , function(t, e) {
    t.exports = function(t) {
        if (Array.isArray(t)) {
            for (var e = 0, n = new Array(t.length); e < t.length; e++) n[e] = t[e];
            return n
        }
    }
}, function(t, e) {
    t.exports = function(t) {
        if (Symbol.iterator in Object(t) || "[object Arguments]" === Object.prototype.toString.call(t)) return Array.from(t)
    }
}, function(t, e) {
    t.exports = function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance")
    }
}, function(t, e) {
    t.exports = function(t) {
        if (Array.isArray(t)) return t
    }
}, function(t, e) {
    t.exports = function(t, e) {
        if (Symbol.iterator in Object(t) || "[object Arguments]" === Object.prototype.toString.call(t)) {
            var n = [],
                r = !0,
                i = !1,
                o = void 0;
            try {
                for (var s, a = t[Symbol.iterator](); !(r = (s = a.next()).done) && (n.push(s.value), !e || n.length !== e); r = !0);
            } catch (t) {
                i = !0, o = t
            } finally {
                try {
                    r || null == a.return || a.return()
                } finally {
                    if (i) throw o
                }
            }
            return n
        }
    }
}, function(t, e) {
    t.exports = function() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance")
    }
}, function(t, e, n) {
    (function(e) {
        var n;
        n = "undefined" != typeof window ? window : void 0 !== e ? e : "undefined" != typeof self ? self : {}, t.exports = n
    }).call(this, n(7))
}, function(t, e) {}, function(t, e, n) {
    "use strict";
    var r = n(21),
        i = n(77),
        o = n(25).Buffer,
        s = new Array(16);

    function a() {
        i.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878
    }

    function u(t, e) {
        return t << e | t >>> 32 - e
    }

    function c(t, e, n, r, i, o, s) {
        return u(t + (e & n | ~e & r) + i + o | 0, s) + e | 0
    }

    function h(t, e, n, r, i, o, s) {
        return u(t + (e & r | n & ~r) + i + o | 0, s) + e | 0
    }

    function f(t, e, n, r, i, o, s) {
        return u(t + (e ^ n ^ r) + i + o | 0, s) + e | 0
    }

    function l(t, e, n, r, i, o, s) {
        return u(t + (n ^ (e | ~r)) + i + o | 0, s) + e | 0
    }
    r(a, i), a.prototype._update = function() {
        for (var t = s, e = 0; e < 16; ++e) t[e] = this._block.readInt32LE(4 * e);
        var n = this._a,
            r = this._b,
            i = this._c,
            o = this._d;
        n = c(n, r, i, o, t[0], 3614090360, 7), o = c(o, n, r, i, t[1], 3905402710, 12), i = c(i, o, n, r, t[2], 606105819, 17), r = c(r, i, o, n, t[3], 3250441966, 22), n = c(n, r, i, o, t[4], 4118548399, 7), o = c(o, n, r, i, t[5], 1200080426, 12), i = c(i, o, n, r, t[6], 2821735955, 17), r = c(r, i, o, n, t[7], 4249261313, 22), n = c(n, r, i, o, t[8], 1770035416, 7), o = c(o, n, r, i, t[9], 2336552879, 12), i = c(i, o, n, r, t[10], 4294925233, 17), r = c(r, i, o, n, t[11], 2304563134, 22), n = c(n, r, i, o, t[12], 1804603682, 7), o = c(o, n, r, i, t[13], 4254626195, 12), i = c(i, o, n, r, t[14], 2792965006, 17), n = h(n, r = c(r, i, o, n, t[15], 1236535329, 22), i, o, t[1], 4129170786, 5), o = h(o, n, r, i, t[6], 3225465664, 9), i = h(i, o, n, r, t[11], 643717713, 14), r = h(r, i, o, n, t[0], 3921069994, 20), n = h(n, r, i, o, t[5], 3593408605, 5), o = h(o, n, r, i, t[10], 38016083, 9), i = h(i, o, n, r, t[15], 3634488961, 14), r = h(r, i, o, n, t[4], 3889429448, 20), n = h(n, r, i, o, t[9], 568446438, 5), o = h(o, n, r, i, t[14], 3275163606, 9), i = h(i, o, n, r, t[3], 4107603335, 14), r = h(r, i, o, n, t[8], 1163531501, 20), n = h(n, r, i, o, t[13], 2850285829, 5), o = h(o, n, r, i, t[2], 4243563512, 9), i = h(i, o, n, r, t[7], 1735328473, 14), n = f(n, r = h(r, i, o, n, t[12], 2368359562, 20), i, o, t[5], 4294588738, 4), o = f(o, n, r, i, t[8], 2272392833, 11), i = f(i, o, n, r, t[11], 1839030562, 16), r = f(r, i, o, n, t[14], 4259657740, 23), n = f(n, r, i, o, t[1], 2763975236, 4), o = f(o, n, r, i, t[4], 1272893353, 11), i = f(i, o, n, r, t[7], 4139469664, 16), r = f(r, i, o, n, t[10], 3200236656, 23), n = f(n, r, i, o, t[13], 681279174, 4), o = f(o, n, r, i, t[0], 3936430074, 11), i = f(i, o, n, r, t[3], 3572445317, 16), r = f(r, i, o, n, t[6], 76029189, 23), n = f(n, r, i, o, t[9], 3654602809, 4), o = f(o, n, r, i, t[12], 3873151461, 11), i = f(i, o, n, r, t[15], 530742520, 16), n = l(n, r = f(r, i, o, n, t[2], 3299628645, 23), i, o, t[0], 4096336452, 6), o = l(o, n, r, i, t[7], 1126891415, 10), i = l(i, o, n, r, t[14], 2878612391, 15), r = l(r, i, o, n, t[5], 4237533241, 21), n = l(n, r, i, o, t[12], 1700485571, 6), o = l(o, n, r, i, t[3], 2399980690, 10), i = l(i, o, n, r, t[10], 4293915773, 15), r = l(r, i, o, n, t[1], 2240044497, 21), n = l(n, r, i, o, t[8], 1873313359, 6), o = l(o, n, r, i, t[15], 4264355552, 10), i = l(i, o, n, r, t[6], 2734768916, 15), r = l(r, i, o, n, t[13], 1309151649, 21), n = l(n, r, i, o, t[4], 4149444226, 6), o = l(o, n, r, i, t[11], 3174756917, 10), i = l(i, o, n, r, t[2], 718787259, 15), r = l(r, i, o, n, t[9], 3951481745, 21), this._a = this._a + n | 0, this._b = this._b + r | 0, this._c = this._c + i | 0, this._d = this._d + o | 0
    }, a.prototype._digest = function() {
        this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
        var t = o.allocUnsafe(16);
        return t.writeInt32LE(this._a, 0), t.writeInt32LE(this._b, 4), t.writeInt32LE(this._c, 8), t.writeInt32LE(this._d, 12), t
    }, t.exports = a
}, function(t, e, n) {
    "use strict";
    var r = n(12).Buffer,
        i = n(21),
        o = n(77),
        s = new Array(16),
        a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13],
        u = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11],
        c = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6],
        h = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11],
        f = [0, 1518500249, 1859775393, 2400959708, 2840853838],
        l = [1352829926, 1548603684, 1836072691, 2053994217, 0];

    function d() {
        o.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520
    }

    function p(t, e) {
        return t << e | t >>> 32 - e
    }

    function g(t, e, n, r, i, o, s, a) {
        return p(t + (e ^ n ^ r) + o + s | 0, a) + i | 0
    }

    function y(t, e, n, r, i, o, s, a) {
        return p(t + (e & n | ~e & r) + o + s | 0, a) + i | 0
    }

    function w(t, e, n, r, i, o, s, a) {
        return p(t + ((e | ~n) ^ r) + o + s | 0, a) + i | 0
    }

    function v(t, e, n, r, i, o, s, a) {
        return p(t + (e & r | n & ~r) + o + s | 0, a) + i | 0
    }

    function b(t, e, n, r, i, o, s, a) {
        return p(t + (e ^ (n | ~r)) + o + s | 0, a) + i | 0
    }
    i(d, o), d.prototype._update = function() {
        for (var t = s, e = 0; e < 16; ++e) t[e] = this._block.readInt32LE(4 * e);
        for (var n = 0 | this._a, r = 0 | this._b, i = 0 | this._c, o = 0 | this._d, d = 0 | this._e, m = 0 | this._a, _ = 0 | this._b, k = 0 | this._c, S = 0 | this._d, A = 0 | this._e, E = 0; E < 80; E += 1) {
            var x, P;
            E < 16 ? (x = g(n, r, i, o, d, t[a[E]], f[0], c[E]), P = b(m, _, k, S, A, t[u[E]], l[0], h[E])) : E < 32 ? (x = y(n, r, i, o, d, t[a[E]], f[1], c[E]), P = v(m, _, k, S, A, t[u[E]], l[1], h[E])) : E < 48 ? (x = w(n, r, i, o, d, t[a[E]], f[2], c[E]), P = w(m, _, k, S, A, t[u[E]], l[2], h[E])) : E < 64 ? (x = v(n, r, i, o, d, t[a[E]], f[3], c[E]), P = y(m, _, k, S, A, t[u[E]], l[3], h[E])) : (x = b(n, r, i, o, d, t[a[E]], f[4], c[E]), P = g(m, _, k, S, A, t[u[E]], l[4], h[E])), n = d, d = o, o = p(i, 10), i = r, r = x, m = A, A = S, S = p(k, 10), k = _, _ = P
        }
        var O = this._b + i + S | 0;
        this._b = this._c + o + A | 0, this._c = this._d + d + m | 0, this._d = this._e + n + _ | 0, this._e = this._a + r + k | 0, this._a = O
    }, d.prototype._digest = function() {
        this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
        var t = r.alloc ? r.alloc(20) : new r(20);
        return t.writeInt32LE(this._a, 0), t.writeInt32LE(this._b, 4), t.writeInt32LE(this._c, 8), t.writeInt32LE(this._d, 12), t.writeInt32LE(this._e, 16), t
    }, t.exports = d
}, function(t, e, n) {
    (e = t.exports = function(t) {
        t = t.toLowerCase();
        var n = e[t];
        if (!n) throw new Error(t + " is not supported (we accept pull requests)");
        return new n
    }).sha = n(132), e.sha1 = n(133), e.sha224 = n(134), e.sha256 = n(78), e.sha384 = n(135), e.sha512 = n(79)
}, function(t, e, n) {
    var r = n(21),
        i = n(37),
        o = n(25).Buffer,
        s = [1518500249, 1859775393, -1894007588, -899497514],
        a = new Array(80);

    function u() {
        this.init(), this._w = a, i.call(this, 64, 56)
    }

    function c(t) {
        return t << 30 | t >>> 2
    }

    function h(t, e, n, r) {
        return 0 === t ? e & n | ~e & r : 2 === t ? e & n | e & r | n & r : e ^ n ^ r
    }
    r(u, i), u.prototype.init = function() {
        return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this
    }, u.prototype._update = function(t) {
        for (var e, n = this._w, r = 0 | this._a, i = 0 | this._b, o = 0 | this._c, a = 0 | this._d, u = 0 | this._e, f = 0; f < 16; ++f) n[f] = t.readInt32BE(4 * f);
        for (; f < 80; ++f) n[f] = n[f - 3] ^ n[f - 8] ^ n[f - 14] ^ n[f - 16];
        for (var l = 0; l < 80; ++l) {
            var d = ~~(l / 20),
                p = 0 | ((e = r) << 5 | e >>> 27) + h(d, i, o, a) + u + n[l] + s[d];
            u = a, a = o, o = c(i), i = r, r = p
        }
        this._a = r + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = a + this._d | 0, this._e = u + this._e | 0
    }, u.prototype._hash = function() {
        var t = o.allocUnsafe(20);
        return t.writeInt32BE(0 | this._a, 0), t.writeInt32BE(0 | this._b, 4), t.writeInt32BE(0 | this._c, 8), t.writeInt32BE(0 | this._d, 12), t.writeInt32BE(0 | this._e, 16), t
    }, t.exports = u
}, function(t, e, n) {
    var r = n(21),
        i = n(37),
        o = n(25).Buffer,
        s = [1518500249, 1859775393, -1894007588, -899497514],
        a = new Array(80);

    function u() {
        this.init(), this._w = a, i.call(this, 64, 56)
    }

    function c(t) {
        return t << 5 | t >>> 27
    }

    function h(t) {
        return t << 30 | t >>> 2
    }

    function f(t, e, n, r) {
        return 0 === t ? e & n | ~e & r : 2 === t ? e & n | e & r | n & r : e ^ n ^ r
    }
    r(u, i), u.prototype.init = function() {
        return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this
    }, u.prototype._update = function(t) {
        for (var e, n = this._w, r = 0 | this._a, i = 0 | this._b, o = 0 | this._c, a = 0 | this._d, u = 0 | this._e, l = 0; l < 16; ++l) n[l] = t.readInt32BE(4 * l);
        for (; l < 80; ++l) n[l] = (e = n[l - 3] ^ n[l - 8] ^ n[l - 14] ^ n[l - 16]) << 1 | e >>> 31;
        for (var d = 0; d < 80; ++d) {
            var p = ~~(d / 20),
                g = c(r) + f(p, i, o, a) + u + n[d] + s[p] | 0;
            u = a, a = o, o = h(i), i = r, r = g
        }
        this._a = r + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = a + this._d | 0, this._e = u + this._e | 0
    }, u.prototype._hash = function() {
        var t = o.allocUnsafe(20);
        return t.writeInt32BE(0 | this._a, 0), t.writeInt32BE(0 | this._b, 4), t.writeInt32BE(0 | this._c, 8), t.writeInt32BE(0 | this._d, 12), t.writeInt32BE(0 | this._e, 16), t
    }, t.exports = u
}, function(t, e, n) {
    var r = n(21),
        i = n(78),
        o = n(37),
        s = n(25).Buffer,
        a = new Array(64);

    function u() {
        this.init(), this._w = a, o.call(this, 64, 56)
    }
    r(u, i), u.prototype.init = function() {
        return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this
    }, u.prototype._hash = function() {
        var t = s.allocUnsafe(28);
        return t.writeInt32BE(this._a, 0), t.writeInt32BE(this._b, 4), t.writeInt32BE(this._c, 8), t.writeInt32BE(this._d, 12), t.writeInt32BE(this._e, 16), t.writeInt32BE(this._f, 20), t.writeInt32BE(this._g, 24), t
    }, t.exports = u
}, function(t, e, n) {
    var r = n(21),
        i = n(79),
        o = n(37),
        s = n(25).Buffer,
        a = new Array(160);

    function u() {
        this.init(), this._w = a, o.call(this, 128, 112)
    }
    r(u, i), u.prototype.init = function() {
        return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this
    }, u.prototype._hash = function() {
        var t = s.allocUnsafe(48);

        function e(e, n, r) {
            t.writeInt32BE(e, r), t.writeInt32BE(n, r + 4)
        }
        return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), t
    }, t.exports = u
}, function(t, e, n) {
    var r = n(25).Buffer,
        i = n(30).Transform,
        o = n(34).StringDecoder;

    function s(t) {
        i.call(this), this.hashMode = "string" == typeof t, this.hashMode ? this[t] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null
    }
    n(21)(s, i), s.prototype.update = function(t, e, n) {
        "string" == typeof t && (t = r.from(t, e));
        var i = this._update(t);
        return this.hashMode ? this : (n && (i = this._toString(i, n)), i)
    }, s.prototype.setAutoPadding = function() {}, s.prototype.getAuthTag = function() {
        throw new Error("trying to get auth tag in unsupported state")
    }, s.prototype.setAuthTag = function() {
        throw new Error("trying to set auth tag in unsupported state")
    }, s.prototype.setAAD = function() {
        throw new Error("trying to set aad in unsupported state")
    }, s.prototype._transform = function(t, e, n) {
        var r;
        try {
            this.hashMode ? this._update(t) : this.push(this._update(t))
        } catch (t) {
            r = t
        } finally {
            n(r)
        }
    }, s.prototype._flush = function(t) {
        var e;
        try {
            this.push(this.__final())
        } catch (t) {
            e = t
        }
        t(e)
    }, s.prototype._finalOrDigest = function(t) {
        var e = this.__final() || r.alloc(0);
        return t && (e = this._toString(e, t, !0)), e
    }, s.prototype._toString = function(t, e, n) {
        if (this._decoder || (this._decoder = new o(e), this._encoding = e), this._encoding !== e) throw new Error("can't switch encodings");
        var r = this._decoder.write(t);
        return n && (r += this._decoder.end()), r
    }, t.exports = s
}, function(t, e, n) {
    /**
     *
     * @revision    $Id: index.js 2012-03-24 16:21:10 Aleksey $
     * @created     2016-09-24 16:21:10
     * @category    Express Helpers
     * @package     device-uuid
     * @version     1.0.2
     * @copyright   Copyright (c) 2016-2017 - All rights reserved.
     * @license     MIT License
     * @author      Alexey Gordeyev IK <aleksej@gordejev.lv>
     * @link        http://www.gordejev.lv
     *
     */
    t.exports = n(138)
}, function(t, e) {
    /*!
     * device-uuid.js v1.0.4 (https://github.com/biggora/device-uuid/)
     * Copyright 2016-2017 Alexey Gordeyev
     * Licensed under MIT (https://github.com/biggora/device-uuid/blob/master/LICENSE)
     */
    ! function(t) {
        "use strict";
        var e = new RegExp("^.*(" + ["\\+https:\\/\\/developers.google.com\\/\\+\\/web\\/snippet\\/", "googlebot", "baiduspider", "gurujibot", "yandexbot", "slurp", "msnbot", "bingbot", "facebookexternalhit", "linkedinbot", "twitterbot", "slackbot", "telegrambot", "applebot", "pingdom", "tumblr ", "Embedly", "spbot"].join("|") + ").*$"),
            n = function(t) {
                t = t || {};
                var r = {
                    version: !1,
                    language: !1,
                    platform: !0,
                    os: !0,
                    pixelDepth: !0,
                    colorDepth: !0,
                    resolution: !1,
                    isAuthoritative: !0,
                    silkAccelerated: !0,
                    isKindleFire: !0,
                    isDesktop: !0,
                    isMobile: !0,
                    isTablet: !0,
                    isWindows: !0,
                    isLinux: !0,
                    isLinux64: !0,
                    isChromeOS: !0,
                    isMac: !0,
                    isiPad: !0,
                    isiPhone: !0,
                    isiPod: !0,
                    isAndroid: !0,
                    isSamsung: !0,
                    isSmartTV: !0,
                    isRaspberry: !0,
                    isBlackberry: !0,
                    isTouchScreen: !0,
                    isOpera: !1,
                    isIE: !1,
                    isEdge: !1,
                    isIECompatibilityMode: !1,
                    isSafari: !1,
                    isFirefox: !1,
                    isWebkit: !1,
                    isChrome: !1,
                    isKonqueror: !1,
                    isOmniWeb: !1,
                    isSeaMonkey: !1,
                    isFlock: !1,
                    isAmaya: !1,
                    isPhantomJS: !1,
                    isEpiphany: !1,
                    source: !1,
                    cpuCores: !1
                };
                for (var i in t) t.hasOwnProperty(i) && void 0 !== r[i] && (r[i] = t[i]);
                return this.options = r, this.version = "1.0.0", this._Versions = {
                    Edge: /Edge\/([\d\w\.\-]+)/i,
                    Firefox: /firefox\/([\d\w\.\-]+)/i,
                    IE: /msie\s([\d\.]+[\d])|trident\/\d+\.\d+;.*[rv:]+(\d+\.\d)/i,
                    Chrome: /chrome\/([\d\w\.\-]+)/i,
                    Chromium: /(?:chromium|crios)\/([\d\w\.\-]+)/i,
                    Safari: /version\/([\d\w\.\-]+)/i,
                    Opera: /version\/([\d\w\.\-]+)|OPR\/([\d\w\.\-]+)/i,
                    Ps3: /([\d\w\.\-]+)\)\s*$/i,
                    Psp: /([\d\w\.\-]+)\)?\s*$/i,
                    Amaya: /amaya\/([\d\w\.\-]+)/i,
                    SeaMonkey: /seamonkey\/([\d\w\.\-]+)/i,
                    OmniWeb: /omniweb\/v([\d\w\.\-]+)/i,
                    Flock: /flock\/([\d\w\.\-]+)/i,
                    Epiphany: /epiphany\/([\d\w\.\-]+)/i,
                    WinJs: /msapphost\/([\d\w\.\-]+)/i,
                    PhantomJS: /phantomjs\/([\d\w\.\-]+)/i,
                    UC: /UCBrowser\/([\d\w\.]+)/i
                }, this._Browsers = {
                    Edge: /edge/i,
                    Amaya: /amaya/i,
                    Konqueror: /konqueror/i,
                    Epiphany: /epiphany/i,
                    SeaMonkey: /seamonkey/i,
                    Flock: /flock/i,
                    OmniWeb: /omniweb/i,
                    Chromium: /chromium|crios/i,
                    Chrome: /chrome/i,
                    Safari: /safari/i,
                    IE: /msie|trident/i,
                    Opera: /opera|OPR/i,
                    PS3: /playstation 3/i,
                    PSP: /playstation portable/i,
                    Firefox: /firefox/i,
                    WinJs: /msapphost/i,
                    PhantomJS: /phantomjs/i,
                    UC: /UCBrowser/i
                }, this._OS = {
                    Windows10: /windows nt 10\.0/i,
                    Windows81: /windows nt 6\.3/i,
                    Windows8: /windows nt 6\.2/i,
                    Windows7: /windows nt 6\.1/i,
                    UnknownWindows: /windows nt 6\.\d+/i,
                    WindowsVista: /windows nt 6\.0/i,
                    Windows2003: /windows nt 5\.2/i,
                    WindowsXP: /windows nt 5\.1/i,
                    Windows2000: /windows nt 5\.0/i,
                    WindowsPhone8: /windows phone 8\./,
                    OSXCheetah: /os x 10[._]0/i,
                    OSXPuma: /os x 10[._]1(\D|$)/i,
                    OSXJaguar: /os x 10[._]2/i,
                    OSXPanther: /os x 10[._]3/i,
                    OSXTiger: /os x 10[._]4/i,
                    OSXLeopard: /os x 10[._]5/i,
                    OSXSnowLeopard: /os x 10[._]6/i,
                    OSXLion: /os x 10[._]7/i,
                    OSXMountainLion: /os x 10[._]8/i,
                    OSXMavericks: /os x 10[._]9/i,
                    OSXYosemite: /os x 10[._]10/i,
                    OSXElCapitan: /os x 10[._]11/i,
                    OSXSierra: /os x 10[._]12/i,
                    Mac: /os x/i,
                    Linux: /linux/i,
                    Linux64: /linux x86_64/i,
                    ChromeOS: /cros/i,
                    Wii: /wii/i,
                    PS3: /playstation 3/i,
                    PSP: /playstation portable/i,
                    iPad: /\(iPad.*os (\d+)[._](\d+)/i,
                    iPhone: /\(iPhone.*os (\d+)[._](\d+)/i,
                    Bada: /Bada\/(\d+)\.(\d+)/i,
                    Curl: /curl\/(\d+)\.(\d+)\.(\d+)/i
                }, this._Platform = {
                    Windows: /windows nt/i,
                    WindowsPhone: /windows phone/i,
                    Mac: /macintosh/i,
                    Linux: /linux/i,
                    Wii: /wii/i,
                    Playstation: /playstation/i,
                    iPad: /ipad/i,
                    iPod: /ipod/i,
                    iPhone: /iphone/i,
                    Android: /android/i,
                    Blackberry: /blackberry/i,
                    Samsung: /samsung/i,
                    Curl: /curl/i
                }, this.DefaultAgent = {
                    isAuthoritative: !0,
                    isMobile: !1,
                    isTablet: !1,
                    isiPad: !1,
                    isiPod: !1,
                    isiPhone: !1,
                    isAndroid: !1,
                    isBlackberry: !1,
                    isOpera: !1,
                    isIE: !1,
                    isEdge: !1,
                    isIECompatibilityMode: !1,
                    isSafari: !1,
                    isFirefox: !1,
                    isWebkit: !1,
                    isChrome: !1,
                    isKonqueror: !1,
                    isOmniWeb: !1,
                    isSeaMonkey: !1,
                    isFlock: !1,
                    isAmaya: !1,
                    isPhantomJS: !1,
                    isEpiphany: !1,
                    isDesktop: !1,
                    isWindows: !1,
                    isLinux: !1,
                    isLinux64: !1,
                    isMac: !1,
                    isChromeOS: !1,
                    isBada: !1,
                    isSamsung: !1,
                    isRaspberry: !1,
                    isBot: !1,
                    isCurl: !1,
                    isAndroidTablet: !1,
                    isWinJs: !1,
                    isKindleFire: !1,
                    isSilk: !1,
                    isCaptive: !1,
                    isSmartTV: !1,
                    isUC: !1,
                    isTouchScreen: !1,
                    silkAccelerated: !1,
                    colorDepth: -1,
                    pixelDepth: -1,
                    resolution: [],
                    cpuCores: -1,
                    language: "unknown",
                    browser: "unknown",
                    version: "unknown",
                    os: "unknown",
                    platform: "unknown",
                    geoIp: {},
                    source: "",
                    hashInt: function(t) {
                        var e, n, r = 0;
                        if (0 === t.length) return r;
                        for (e = 0, n = t.length; e < n; e++) r = (r << 5) - r + t.charCodeAt(e), r |= 0;
                        return r
                    },
                    hashMD5: function(t) {
                        function e(t, e) {
                            return t << e | t >>> 32 - e
                        }

                        function n(t, e) {
                            var n, r, i, o, s;
                            return i = 2147483648 & t, o = 2147483648 & e, s = (1073741823 & t) + (1073741823 & e), (n = 1073741824 & t) & (r = 1073741824 & e) ? 2147483648 ^ s ^ i ^ o : n | r ? 1073741824 & s ? 3221225472 ^ s ^ i ^ o : 1073741824 ^ s ^ i ^ o : s ^ i ^ o
                        }

                        function r(t, r, i, o, s, a, u) {
                            return t = n(t, n(n(function(t, e, n) {
                                return t & e | ~t & n
                            }(r, i, o), s), u)), n(e(t, a), r)
                        }

                        function i(t, r, i, o, s, a, u) {
                            return t = n(t, n(n(function(t, e, n) {
                                return t & n | e & ~n
                            }(r, i, o), s), u)), n(e(t, a), r)
                        }

                        function o(t, r, i, o, s, a, u) {
                            return t = n(t, n(n(function(t, e, n) {
                                return t ^ e ^ n
                            }(r, i, o), s), u)), n(e(t, a), r)
                        }

                        function s(t, r, i, o, s, a, u) {
                            return t = n(t, n(n(function(t, e, n) {
                                return e ^ (t | ~n)
                            }(r, i, o), s), u)), n(e(t, a), r)
                        }

                        function a(t) {
                            var e, n = "",
                                r = "";
                            for (e = 0; e <= 3; e++) n += (r = "0" + (t >>> 8 * e & 255).toString(16)).substr(r.length - 2, 2);
                            return n
                        }
                        var u, c, h, f, l, d, p, g, y, w;
                        for (u = function(t) {
                                for (var e, n = t.length, r = n + 8, i = 16 * ((r - r % 64) / 64 + 1), o = new Array(i - 1), s = 0, a = 0; a < n;) s = a % 4 * 8, o[e = (a - a % 4) / 4] = o[e] | t.charCodeAt(a) << s, a++;
                                return s = a % 4 * 8, o[e = (a - a % 4) / 4] = o[e] | 128 << s, o[i - 2] = n << 3, o[i - 1] = n >>> 29, o
                            }(t = function(t) {
                                t = t.replace(/\r\n/g, "\n");
                                for (var e = "", n = 0; n < t.length; n++) {
                                    var r = t.charCodeAt(n);
                                    r < 128 ? e += String.fromCharCode(r) : r > 127 && r < 2048 ? (e += String.fromCharCode(r >> 6 | 192), e += String.fromCharCode(63 & r | 128)) : (e += String.fromCharCode(r >> 12 | 224), e += String.fromCharCode(r >> 6 & 63 | 128), e += String.fromCharCode(63 & r | 128))
                                }
                                return e
                            }(t)), p = 1732584193, g = 4023233417, y = 2562383102, w = 271733878, c = 0; c < u.length; c += 16) h = p, f = g, l = y, d = w, p = r(p, g, y, w, u[c + 0], 7, 3614090360), w = r(w, p, g, y, u[c + 1], 12, 3905402710), y = r(y, w, p, g, u[c + 2], 17, 606105819), g = r(g, y, w, p, u[c + 3], 22, 3250441966), p = r(p, g, y, w, u[c + 4], 7, 4118548399), w = r(w, p, g, y, u[c + 5], 12, 1200080426), y = r(y, w, p, g, u[c + 6], 17, 2821735955), g = r(g, y, w, p, u[c + 7], 22, 4249261313), p = r(p, g, y, w, u[c + 8], 7, 1770035416), w = r(w, p, g, y, u[c + 9], 12, 2336552879), y = r(y, w, p, g, u[c + 10], 17, 4294925233), g = r(g, y, w, p, u[c + 11], 22, 2304563134), p = r(p, g, y, w, u[c + 12], 7, 1804603682), w = r(w, p, g, y, u[c + 13], 12, 4254626195), y = r(y, w, p, g, u[c + 14], 17, 2792965006), p = i(p, g = r(g, y, w, p, u[c + 15], 22, 1236535329), y, w, u[c + 1], 5, 4129170786), w = i(w, p, g, y, u[c + 6], 9, 3225465664), y = i(y, w, p, g, u[c + 11], 14, 643717713), g = i(g, y, w, p, u[c + 0], 20, 3921069994), p = i(p, g, y, w, u[c + 5], 5, 3593408605), w = i(w, p, g, y, u[c + 10], 9, 38016083), y = i(y, w, p, g, u[c + 15], 14, 3634488961), g = i(g, y, w, p, u[c + 4], 20, 3889429448), p = i(p, g, y, w, u[c + 9], 5, 568446438), w = i(w, p, g, y, u[c + 14], 9, 3275163606), y = i(y, w, p, g, u[c + 3], 14, 4107603335), g = i(g, y, w, p, u[c + 8], 20, 1163531501), p = i(p, g, y, w, u[c + 13], 5, 2850285829), w = i(w, p, g, y, u[c + 2], 9, 4243563512), y = i(y, w, p, g, u[c + 7], 14, 1735328473), p = o(p, g = i(g, y, w, p, u[c + 12], 20, 2368359562), y, w, u[c + 5], 4, 4294588738), w = o(w, p, g, y, u[c + 8], 11, 2272392833), y = o(y, w, p, g, u[c + 11], 16, 1839030562), g = o(g, y, w, p, u[c + 14], 23, 4259657740), p = o(p, g, y, w, u[c + 1], 4, 2763975236), w = o(w, p, g, y, u[c + 4], 11, 1272893353), y = o(y, w, p, g, u[c + 7], 16, 4139469664), g = o(g, y, w, p, u[c + 10], 23, 3200236656), p = o(p, g, y, w, u[c + 13], 4, 681279174), w = o(w, p, g, y, u[c + 0], 11, 3936430074), y = o(y, w, p, g, u[c + 3], 16, 3572445317), g = o(g, y, w, p, u[c + 6], 23, 76029189), p = o(p, g, y, w, u[c + 9], 4, 3654602809), w = o(w, p, g, y, u[c + 12], 11, 3873151461), y = o(y, w, p, g, u[c + 15], 16, 530742520), p = s(p, g = o(g, y, w, p, u[c + 2], 23, 3299628645), y, w, u[c + 0], 6, 4096336452), w = s(w, p, g, y, u[c + 7], 10, 1126891415), y = s(y, w, p, g, u[c + 14], 15, 2878612391), g = s(g, y, w, p, u[c + 5], 21, 4237533241), p = s(p, g, y, w, u[c + 12], 6, 1700485571), w = s(w, p, g, y, u[c + 3], 10, 2399980690), y = s(y, w, p, g, u[c + 10], 15, 4293915773), g = s(g, y, w, p, u[c + 1], 21, 2240044497), p = s(p, g, y, w, u[c + 8], 6, 1873313359), w = s(w, p, g, y, u[c + 15], 10, 4264355552), y = s(y, w, p, g, u[c + 6], 15, 2734768916), g = s(g, y, w, p, u[c + 13], 21, 1309151649), p = s(p, g, y, w, u[c + 4], 6, 4149444226), w = s(w, p, g, y, u[c + 11], 10, 3174756917), y = s(y, w, p, g, u[c + 2], 15, 718787259), g = s(g, y, w, p, u[c + 9], 21, 3951481745), p = n(p, h), g = n(g, f), y = n(y, l), w = n(w, d);
                        return (a(p) + a(g) + a(y) + a(w)).toLowerCase()
                    }
                }, this.Agent = {}, this.getBrowser = function(t) {
                    switch (!0) {
                        case this._Browsers.Edge.test(t):
                            return this.Agent.isEdge = !0, "Edge";
                        case this._Browsers.PhantomJS.test(t):
                            return this.Agent.isPhantomJS = !0, "PhantomJS";
                        case this._Browsers.Konqueror.test(t):
                            return this.Agent.isKonqueror = !0, "Konqueror";
                        case this._Browsers.Amaya.test(t):
                            return this.Agent.isAmaya = !0, "Amaya";
                        case this._Browsers.Epiphany.test(t):
                            return this.Agent.isEpiphany = !0, "Epiphany";
                        case this._Browsers.SeaMonkey.test(t):
                            return this.Agent.isSeaMonkey = !0, "SeaMonkey";
                        case this._Browsers.Flock.test(t):
                            return this.Agent.isFlock = !0, "Flock";
                        case this._Browsers.OmniWeb.test(t):
                            return this.Agent.isOmniWeb = !0, "OmniWeb";
                        case this._Browsers.Opera.test(t):
                            return this.Agent.isOpera = !0, "Opera";
                        case this._Browsers.Chromium.test(t):
                            return this.Agent.isChrome = !0, "Chromium";
                        case this._Browsers.Chrome.test(t):
                            return this.Agent.isChrome = !0, "Chrome";
                        case this._Browsers.Safari.test(t):
                            return this.Agent.isSafari = !0, "Safari";
                        case this._Browsers.WinJs.test(t):
                            return this.Agent.isWinJs = !0, "WinJs";
                        case this._Browsers.IE.test(t):
                            return this.Agent.isIE = !0, "IE";
                        case this._Browsers.PS3.test(t):
                            return "ps3";
                        case this._Browsers.PSP.test(t):
                            return "psp";
                        case this._Browsers.Firefox.test(t):
                            return this.Agent.isFirefox = !0, "Firefox";
                        case this._Browsers.UC.test(t):
                            return this.Agent.isUC = !0, "UCBrowser";
                        default:
                            return 0 !== t.indexOf("Mozilla") && /^([\d\w\-\.]+)\/[\d\w\.\-]+/i.test(t) ? (this.Agent.isAuthoritative = !1, RegExp.$1) : "unknown"
                    }
                }, this.getBrowserVersion = function(t) {
                    switch (this.Agent.browser) {
                        case "Edge":
                            if (this._Versions.Edge.test(t)) return RegExp.$1;
                            break;
                        case "PhantomJS":
                            if (this._Versions.PhantomJS.test(t)) return RegExp.$1;
                            break;
                        case "Chrome":
                            if (this._Versions.Chrome.test(t)) return RegExp.$1;
                            break;
                        case "Chromium":
                            if (this._Versions.Chromium.test(t)) return RegExp.$1;
                            break;
                        case "Safari":
                            if (this._Versions.Safari.test(t)) return RegExp.$1;
                            break;
                        case "Opera":
                            if (this._Versions.Opera.test(t)) return RegExp.$1 ? RegExp.$1 : RegExp.$2;
                            break;
                        case "Firefox":
                            if (this._Versions.Firefox.test(t)) return RegExp.$1;
                            break;
                        case "WinJs":
                            if (this._Versions.WinJs.test(t)) return RegExp.$1;
                            break;
                        case "IE":
                            if (this._Versions.IE.test(t)) return RegExp.$2 ? RegExp.$2 : RegExp.$1;
                            break;
                        case "ps3":
                            if (this._Versions.Ps3.test(t)) return RegExp.$1;
                            break;
                        case "psp":
                            if (this._Versions.Psp.test(t)) return RegExp.$1;
                            break;
                        case "Amaya":
                            if (this._Versions.Amaya.test(t)) return RegExp.$1;
                            break;
                        case "Epiphany":
                            if (this._Versions.Epiphany.test(t)) return RegExp.$1;
                            break;
                        case "SeaMonkey":
                            if (this._Versions.SeaMonkey.test(t)) return RegExp.$1;
                            break;
                        case "Flock":
                            if (this._Versions.Flock.test(t)) return RegExp.$1;
                            break;
                        case "OmniWeb":
                            if (this._Versions.OmniWeb.test(t)) return RegExp.$1;
                            break;
                        case "UCBrowser":
                            if (this._Versions.UC.test(t)) return RegExp.$1;
                            break;
                        default:
                            if ("unknown" !== this.Agent.browser && new RegExp(this.Agent.browser + "[\\/ ]([\\d\\w\\.\\-]+)", "i").test(t)) return RegExp.$1
                    }
                }, this.getOS = function(t) {
                    switch (!0) {
                        case this._OS.WindowsVista.test(t):
                            return this.Agent.isWindows = !0, "Windows Vista";
                        case this._OS.Windows7.test(t):
                            return this.Agent.isWindows = !0, "Windows 7";
                        case this._OS.Windows8.test(t):
                            return this.Agent.isWindows = !0, "Windows 8";
                        case this._OS.Windows81.test(t):
                            return this.Agent.isWindows = !0, "Windows 8.1";
                        case this._OS.Windows10.test(t):
                            return this.Agent.isWindows = !0, "Windows 10.0";
                        case this._OS.Windows2003.test(t):
                            return this.Agent.isWindows = !0, "Windows 2003";
                        case this._OS.WindowsXP.test(t):
                            return this.Agent.isWindows = !0, "Windows XP";
                        case this._OS.Windows2000.test(t):
                            return this.Agent.isWindows = !0, "Windows 2000";
                        case this._OS.WindowsPhone8.test(t):
                            return "Windows Phone 8";
                        case this._OS.Linux64.test(t):
                            return this.Agent.isLinux = !0, this.Agent.isLinux64 = !0, "Linux 64";
                        case this._OS.Linux.test(t):
                            return this.Agent.isLinux = !0, "Linux";
                        case this._OS.ChromeOS.test(t):
                            return this.Agent.isChromeOS = !0, "Chrome OS";
                        case this._OS.Wii.test(t):
                            return "Wii";
                        case this._OS.PS3.test(t):
                        case this._OS.PSP.test(t):
                            return "Playstation";
                        case this._OS.OSXCheetah.test(t):
                            return this.Agent.isMac = !0, "OS X Cheetah";
                        case this._OS.OSXPuma.test(t):
                            return this.Agent.isMac = !0, "OS X Puma";
                        case this._OS.OSXJaguar.test(t):
                            return this.Agent.isMac = !0, "OS X Jaguar";
                        case this._OS.OSXPanther.test(t):
                            return this.Agent.isMac = !0, "OS X Panther";
                        case this._OS.OSXTiger.test(t):
                            return this.Agent.isMac = !0, "OS X Tiger";
                        case this._OS.OSXLeopard.test(t):
                            return this.Agent.isMac = !0, "OS X Leopard";
                        case this._OS.OSXSnowLeopard.test(t):
                            return this.Agent.isMac = !0, "OS X Snow Leopard";
                        case this._OS.OSXLion.test(t):
                            return this.Agent.isMac = !0, "OS X Lion";
                        case this._OS.OSXMountainLion.test(t):
                            return this.Agent.isMac = !0, "OS X Mountain Lion";
                        case this._OS.OSXMavericks.test(t):
                            return this.Agent.isMac = !0, "OS X Mavericks";
                        case this._OS.OSXYosemite.test(t):
                            return this.Agent.isMac = !0, "OS X Yosemite";
                        case this._OS.OSXElCapitan.test(t):
                            return this.Agent.isMac = !0, "OS X El Capitan";
                        case this._OS.OSXSierra.test(t):
                            return this.Agent.isMac = !0, "macOS Sierra";
                        case this._OS.Mac.test(t):
                            return this.Agent.isMac = !0, "OS X";
                        case this._OS.iPad.test(t):
                            return this.Agent.isiPad = !0, t.match(this._OS.iPad)[0].replace("_", ".");
                        case this._OS.iPhone.test(t):
                            return this.Agent.isiPhone = !0, t.match(this._OS.iPhone)[0].replace("_", ".");
                        case this._OS.Bada.test(t):
                            return this.Agent.isBada = !0, "Bada";
                        case this._OS.Curl.test(t):
                            return this.Agent.isCurl = !0, "Curl";
                        default:
                            return "unknown"
                    }
                }, this.getPlatform = function(t) {
                    switch (!0) {
                        case this._Platform.Windows.test(t):
                            return "Microsoft Windows";
                        case this._Platform.WindowsPhone.test(t):
                            return this.Agent.isWindowsPhone = !0, "Microsoft Windows Phone";
                        case this._Platform.Mac.test(t):
                            return "Apple Mac";
                        case this._Platform.Curl.test(t):
                            return "Curl";
                        case this._Platform.Android.test(t):
                            return this.Agent.isAndroid = !0, "Android";
                        case this._Platform.Blackberry.test(t):
                            return this.Agent.isBlackberry = !0, "Blackberry";
                        case this._Platform.Linux.test(t):
                            return "Linux";
                        case this._Platform.Wii.test(t):
                            return "Wii";
                        case this._Platform.Playstation.test(t):
                            return "Playstation";
                        case this._Platform.iPad.test(t):
                            return this.Agent.isiPad = !0, "iPad";
                        case this._Platform.iPod.test(t):
                            return this.Agent.isiPod = !0, "iPod";
                        case this._Platform.iPhone.test(t):
                            return this.Agent.isiPhone = !0, "iPhone";
                        case this._Platform.Samsung.test(t):
                            return this.Agent.isiSamsung = !0, "Samsung";
                        default:
                            return "unknown"
                    }
                }, this.testCompatibilityMode = function() {
                    var t = this;
                    if (this.Agent.isIE && /Trident\/(\d)\.0/i.test(t.Agent.source)) {
                        var e = parseInt(RegExp.$1, 10),
                            n = parseInt(t.Agent.version, 10);
                        7 === n && 7 === e && (t.Agent.isIECompatibilityMode = !0, t.Agent.version = 11), 7 === n && 6 === e && (t.Agent.isIECompatibilityMode = !0, t.Agent.version = 10), 7 === n && 5 === e && (t.Agent.isIECompatibilityMode = !0, t.Agent.version = 9), 7 === n && 4 === e && (t.Agent.isIECompatibilityMode = !0, t.Agent.version = 8)
                    }
                }, this.testSilk = function() {
                    switch (!0) {
                        case new RegExp("silk", "gi").test(this.Agent.source):
                            this.Agent.isSilk = !0
                    }
                    return /Silk-Accelerated=true/gi.test(this.Agent.source) && (this.Agent.SilkAccelerated = !0), !!this.Agent.isSilk && "Silk"
                }, this.testKindleFire = function() {
                    var t = this;
                    switch (!0) {
                        case /KFOT/gi.test(t.Agent.source):
                            return this.Agent.isKindleFire = !0, "Kindle Fire";
                        case /KFTT/gi.test(t.Agent.source):
                            return this.Agent.isKindleFire = !0, "Kindle Fire HD";
                        case /KFJWI/gi.test(t.Agent.source):
                            return this.Agent.isKindleFire = !0, "Kindle Fire HD 8.9";
                        case /KFJWA/gi.test(t.Agent.source):
                            return this.Agent.isKindleFire = !0, "Kindle Fire HD 8.9 4G";
                        case /KFSOWI/gi.test(t.Agent.source):
                            return this.Agent.isKindleFire = !0, "Kindle Fire HD 7";
                        case /KFTHWI/gi.test(t.Agent.source):
                            return this.Agent.isKindleFire = !0, "Kindle Fire HDX 7";
                        case /KFTHWA/gi.test(t.Agent.source):
                            return this.Agent.isKindleFire = !0, "Kindle Fire HDX 7 4G";
                        case /KFAPWI/gi.test(t.Agent.source):
                            return this.Agent.isKindleFire = !0, "Kindle Fire HDX 8.9";
                        case /KFAPWA/gi.test(t.Agent.source):
                            return this.Agent.isKindleFire = !0, "Kindle Fire HDX 8.9 4G";
                        default:
                            return !1
                    }
                }, this.testCaptiveNetwork = function() {
                    switch (!0) {
                        case /CaptiveNetwork/gi.test(this.Agent.source):
                            return this.Agent.isCaptive = !0, this.Agent.isMac = !0, this.Agent.platform = "Apple Mac", "CaptiveNetwork";
                        default:
                            return !1
                    }
                }, this.testMobile = function() {
                    var t = this;
                    switch (!0) {
                        case t.Agent.isWindows:
                        case t.Agent.isLinux:
                        case t.Agent.isMac:
                        case t.Agent.isChromeOS:
                            t.Agent.isDesktop = !0;
                            break;
                        case t.Agent.isAndroid:
                        case t.Agent.isSamsung:
                            t.Agent.isMobile = !0, t.Agent.isDesktop = !1
                    }
                    switch (!0) {
                        case t.Agent.isiPad:
                        case t.Agent.isiPod:
                        case t.Agent.isiPhone:
                        case t.Agent.isBada:
                        case t.Agent.isBlackberry:
                        case t.Agent.isAndroid:
                        case t.Agent.isWindowsPhone:
                            t.Agent.isMobile = !0, t.Agent.isDesktop = !1
                    }
                    /mobile/i.test(t.Agent.source) && (t.Agent.isMobile = !0, t.Agent.isDesktop = !1)
                }, this.testTablet = function() {
                    var t = this;
                    switch (!0) {
                        case t.Agent.isiPad:
                        case t.Agent.isAndroidTablet:
                        case t.Agent.isKindleFire:
                            t.Agent.isTablet = !0
                    }
                    /tablet/i.test(t.Agent.source) && (t.Agent.isTablet = !0)
                }, this.testNginxGeoIP = function(t) {
                    var e = this;
                    Object.keys(t).forEach((function(n) {
                        /^GEOIP/i.test(n) && (e.Agent.geoIp[n] = t[n])
                    }))
                }, this.testBot = function() {
                    var t = this,
                        n = e.exec(t.Agent.source.toLowerCase());
                    n ? t.Agent.isBot = n[1] : t.Agent.isAuthoritative || (t.Agent.isBot = /bot/i.test(t.Agent.source))
                }, this.testSmartTV = function() {
                    var t = new RegExp("smart-tv|smarttv|googletv|appletv|hbbtv|pov_tv|netcast.tv", "gi").exec(this.Agent.source.toLowerCase());
                    t && (this.Agent.isSmartTV = t[1])
                }, this.testAndroidTablet = function() {
                    this.Agent.isAndroid && !/mobile/i.test(this.Agent.source) && (this.Agent.isAndroidTablet = !0)
                }, this.testTouchSupport = function() {
                    this.Agent.isTouchScreen = "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0
                }, this.getLaguage = function() {
                    this.Agent.language = (navigator.language || navigator.userLanguage || navigator.browserLanguage || navigator.systemLanguage || "").toLowerCase()
                }, this.getColorDepth = function() {
                    this.Agent.colorDepth = screen.colorDepth || -1
                }, this.getScreenResolution = function() {
                    this.Agent.resolution = [screen.availWidth, screen.availHeight]
                }, this.getPixelDepth = function() {
                    this.Agent.pixelDepth = screen.pixelDepth || -1
                }, this.getCPU = function() {
                    this.Agent.cpuCores = navigator.hardwareConcurrency || -1
                }, this.reset = function() {
                    var t = this;
                    for (var e in t.DefaultAgent) t.DefaultAgent.hasOwnProperty(e) && (t.Agent[e] = t.DefaultAgent[e]);
                    return t
                }, this.parse = function(t) {
                    t = t || navigator.userAgent;
                    var e = new n;
                    return e.Agent.source = t.replace(/^\s*/, "").replace(/\s*$/, ""), e.Agent.os = e.getOS(e.Agent.source), e.Agent.platform = e.getPlatform(e.Agent.source), e.Agent.browser = e.getBrowser(e.Agent.source), e.Agent.version = e.getBrowserVersion(e.Agent.source), e.testBot(), e.testSmartTV(), e.testMobile(), e.testAndroidTablet(), e.testTablet(), e.testCompatibilityMode(), e.testSilk(), e.testKindleFire(), e.testCaptiveNetwork(), e.testTouchSupport(), e.getLaguage(), e.getColorDepth(), e.getPixelDepth(), e.getScreenResolution(), e.getCPU(), e.Agent
                }, this.get = function(t) {
                    var e = this.parse(),
                        n = [];
                    for (var r in this.options) this.options.hasOwnProperty(r) && !0 === this.options[r] && n.push(e[r]);
                    t && n.push(t), !this.options.resolution && e.isMobile && n.push(e.resolution);
                    var i = e.hashMD5(n.join(":"));
                    return [i.slice(0, 8), i.slice(8, 12), "4" + i.slice(12, 15), "b" + i.slice(15, 18), i.slice(20)].join("-")
                }, this.Agent = this.DefaultAgent, this
            };
        t.DeviceUUID = n, new n(navigator.userAgent)
    }(this)
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(t, e, n) {
    "use strict";
    n.r(e);
    var r = {};
    n.r(r), n.d(r, "BLOCKCHAIN_SUPPORT", (function() {
        return g
    })), n.d(r, "WALLET_SUPPORT", (function() {
        return y
    }));
    var i, o = n(0),
        s = n.n(o),
        a = n(13),
        u = n.n(a),
        c = n(1),
        h = n.n(c),
        f = n(4),
        l = n.n(f),
        d = n(5),
        p = n.n(d),
        g = "blockchain_support",
        y = "wallet_support",
        w = new(function() {
            function t() {
                l()(this, t), this.plugins = []
            }
            return p()(t, [{
                key: "loadPlugin",
                value: function(t) {
                    this.plugin(t.name) || this.plugins.push(t)
                }
            }, {
                key: "wallets",
                value: function() {
                    return this.plugins.filter((function(t) {
                        return t.type === y
                    }))
                }
            }, {
                key: "signatureProviders",
                value: function() {
                    return this.plugins.filter((function(t) {
                        return t.type === g
                    }))
                }
            }, {
                key: "supportedBlockchains",
                value: function() {
                    return this.signatureProviders().map((function() {
                        return name
                    }))
                }
            }, {
                key: "plugin",
                value: function(t) {
                    return this.plugins.find((function(e) {
                        return e.name === t
                    }))
                }
            }, {
                key: "endorsedNetworks",
                value: function() {
                    var t = h()(s.a.mark((function t() {
                        return s.a.wrap((function(t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.next = 2, Promise.all(this.signatureProviders().map(function() {
                                        var t = h()(s.a.mark((function t(e) {
                                            return s.a.wrap((function(t) {
                                                for (;;) switch (t.prev = t.next) {
                                                    case 0:
                                                        return t.next = 2, e.getEndorsedNetwork();
                                                    case 2:
                                                        return t.abrupt("return", t.sent);
                                                    case 3:
                                                    case "end":
                                                        return t.stop()
                                                }
                                            }), t)
                                        })));
                                        return function() {
                                            return t.apply(this, arguments)
                                        }
                                    }()));
                                case 2:
                                    return t.abrupt("return", t.sent);
                                case 3:
                                case "end":
                                    return t.stop()
                            }
                        }), t, this)
                    })));
                    return function() {
                        return t.apply(this, arguments)
                    }
                }()
            }]), t
        }()),
        v = n(112),
        b = n.n(v),
        m = n(113),
        _ = n.n(m),
        k = {},
        S = function() {
            return "undefined" == typeof window ? {
                localStorage: {
                    setItem: function(t, e) {
                        return k[t] = e
                    },
                    getItem: function(t) {
                        return k[t] || null
                    },
                    removeItem: function(t) {
                        return delete k[t]
                    }
                }
            } : window
        },
        A = function() {
            function t() {
                l()(this, t)
            }
            return p()(t, null, [{
                key: "setAppKey",
                value: function(t) {
                    S().localStorage.setItem("appkey", t)
                }
            }, {
                key: "getAppKey",
                value: function() {
                    return S().localStorage.getItem("appkey")
                }
            }, {
                key: "removeAppKey",
                value: function() {
                    return S().localStorage.removeItem("appkey")
                }
            }, {
                key: "setNonce",
                value: function(t) {
                    S().localStorage.setItem("nonce", t)
                }
            }, {
                key: "getNonce",
                value: function() {
                    return S().localStorage.getItem("nonce")
                }
            }, {
                key: "removeNonce",
                value: function() {
                    return S().localStorage.removeItem("nonce")
                }
            }]), t
        }(),
        E = n(114),
        x = n.n(E),
        P = n(115),
        O = n.n(P),
        T = n(116),
        R = n.n(T);
    if ("undefined" == typeof navigator) i = "nodejs_env";
    else {
        var I = (new(0, n(137).DeviceUUID)).parse(),
            L = [I.language, I.platform, I.os, I.cpuCores, I.colorDepth];
        i = I.hashMD5(L.join(":"))
    }
    var B, C = i,
        M = "/socket.io/?EIO=3&transport=websocket",
        F = function(t) {
            return O()("sha256").update(t).digest("hex")
        },
        j = function() {
            var t = new Uint8Array(24);
            return x()(t), t.join("")
        },
        W = function() {
            function t(e, n) {
                l()(this, t), this.plugin = e, this.timeout = n, this.uuid = null, this.socket = null, this.connected = !1, this.paired = !1, this.openRequests = [], this.pairingPromise = null, this.eventHandlers = {}, this.appkey = A.getAppKey(), this.appkey || (this.appkey = "appkey:" + j())
            }
            return p()(t, [{
                key: "addEventHandler",
                value: function(t, e) {
                    e || (e = "app"), this.eventHandlers[e] = t
                }
            }, {
                key: "removeEventHandler",
                value: function(t) {
                    t || (t = "app"), delete this.eventHandlers[t]
                }
            }, {
                key: "link",
                value: function() {
                    var t = this,
                        e = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0],
                        n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null,
                        r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
                    return this.uuid = n, new Promise(function() {
                        var n = h()(s.a.mark((function n(i) {
                            var o, a, c, f, l, d, p;
                            return s.a.wrap((function(n) {
                                for (;;) switch (n.prev = n.next) {
                                    case 0:
                                        return o = function() {
                                            t.socket.onmessage = function(o) {
                                                if (-1 === o.data.indexOf("42/scatter")) return !1;
                                                var s = JSON.parse(o.data.replace("42/scatter,", "")),
                                                    a = _()(s, 2),
                                                    u = a[0],
                                                    c = a[1];
                                                return "pong" !== u ? "ping" === u ? t.socket.send('42/scatter,["pong"]') : "paired" === u ? e(c) : "rekey" === u ? n() : "api" === u ? r(c) : "event" === u ? i(c) : void 0 : void 0
                                            };
                                            var e = function(e) {
                                                    if (t.paired = e, t.paired) {
                                                        var n = A.getAppKey(),
                                                            r = -1 < t.appkey.indexOf("appkey:") ? F(t.appkey) : t.appkey;
                                                        n && n === r || (A.setAppKey(r), t.appkey = A.getAppKey())
                                                    }
                                                    t.pairingPromise.resolve(e)
                                                },
                                                n = function() {
                                                    t.appkey = "appkey:" + j(), t.send("rekeyed", {
                                                        data: {
                                                            appkey: t.appkey,
                                                            origin: t.getOrigin()
                                                        },
                                                        plugin: t.plugin
                                                    })
                                                },
                                                r = function(e) {
                                                    var n = t.openRequests.find((function(t) {
                                                        return t.id === e.id
                                                    }));
                                                    n && (t.openRequests = t.openRequests.filter((function(t) {
                                                        return t.id !== e.id
                                                    })), "object" === u()(e.result) && null !== e.result && e.result.hasOwnProperty("isError") ? n.reject(e.result) : n.resolve(e.result))
                                                },
                                                i = function(e) {
                                                    var n = e.event,
                                                        r = e.payload;
                                                    Object.keys(t.eventHandlers).length && Object.keys(t.eventHandlers).map((function(e) {
                                                        t.eventHandlers[e](n, r)
                                                    }))
                                                }
                                        }, a = function(t, e) {
                                            return r || (e ? "local.get-scatter.com:".concat(t) : "127.0.0.1:".concat(t))
                                        }, n.next = 4, new Promise(function() {
                                            var t = h()(s.a.mark((function t(n) {
                                                var i, o, u, c, f;
                                                return s.a.wrap((function(t) {
                                                    for (;;) switch (t.prev = t.next) {
                                                        case 0:
                                                            if (!r) {
                                                                t.next = 2;
                                                                break
                                                            }
                                                            return t.abrupt("return", n([50006]));
                                                        case 2:
                                                            return i = function(t, e) {
                                                                return fetch(t).then((function(t) {
                                                                    return t.text()
                                                                })).then((function(t) {
                                                                    return e("scatter" === t)
                                                                })).catch((function() {
                                                                    return e(!1)
                                                                }))
                                                            }, 50005, o = [], u = function() {
                                                                return (o.length ? o : [50006, 50005]).filter((function(t) {
                                                                    return !(!e && t % 2)
                                                                })).sort((function(t, e) {
                                                                    return e % 2 ? t % 2 ? 0 : -1 : 1
                                                                }))
                                                            }, c = !1, f = function() {
                                                                var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : null;
                                                                c || (c = !0, null !== t && o.push(t), n(u()))
                                                            }, t.next = 10, Promise.all(b()([, , , , , ].keys()).map(function() {
                                                                var t = h()(s.a.mark((function t(n) {
                                                                    var r;
                                                                    return s.a.wrap((function(t) {
                                                                        for (;;) switch (t.prev = t.next) {
                                                                            case 0:
                                                                                if (!c) {
                                                                                    t.next = 2;
                                                                                    break
                                                                                }
                                                                                return t.abrupt("return");
                                                                            case 2:
                                                                                return r = 50005 + 1500 * n, t.next = 5, i("https://" + a(r + 1, !0), (function(t) {
                                                                                    return t ? f(r + 1) : null
                                                                                }));
                                                                            case 5:
                                                                                if (!e) {
                                                                                    t.next = 8;
                                                                                    break
                                                                                }
                                                                                return t.next = 8, i("http://" + a(r, !1), (function(t) {
                                                                                    return t ? f(r) : null
                                                                                }));
                                                                            case 8:
                                                                                return t.abrupt("return", !0);
                                                                            case 9:
                                                                            case "end":
                                                                                return t.stop()
                                                                        }
                                                                    }), t)
                                                                })));
                                                                return function() {
                                                                    return t.apply(this, arguments)
                                                                }
                                                            }()));
                                                        case 10:
                                                            f();
                                                        case 11:
                                                        case "end":
                                                            return t.stop()
                                                    }
                                                }), t)
                                            })));
                                            return function() {
                                                return t.apply(this, arguments)
                                            }
                                        }());
                                    case 4:
                                        c = n.sent, f = function(t) {
                                            return new Promise((function(e) {
                                                var n = !(t % 2),
                                                    r = a(t, n),
                                                    i = n ? "wss://" : "ws://",
                                                    o = new R.a("".concat(i).concat(r).concat(M));
                                                o.onerror = function() {
                                                    return e(!1)
                                                }, o.onopen = function() {
                                                    return e(o)
                                                }
                                            }))
                                        }, l = !1, d = 0;
                                    case 8:
                                        if (!(d < c.length)) {
                                            n.next = 26;
                                            break
                                        }
                                        if (!l) {
                                            n.next = 11;
                                            break
                                        }
                                        return n.abrupt("continue", 23);
                                    case 11:
                                        return n.next = 13, f(c[d]);
                                    case 13:
                                        if (!(p = n.sent)) {
                                            n.next = 23;
                                            break
                                        }
                                        return l = !0, t.socket = p, t.send(), t.connected = !0, o(), t.pairingPromise = null, t.pair(!0).then((function() {
                                            return i(!0)
                                        })), n.abrupt("break", 26);
                                    case 23:
                                        d++, n.next = 8;
                                        break;
                                    case 26:
                                    case "end":
                                        return n.stop()
                                }
                            }), n)
                        })));
                        return function() {
                            return n.apply(this, arguments)
                        }
                    }())
                }
            }, {
                key: "isConnected",
                value: function() {
                    return this.connected
                }
            }, {
                key: "isPaired",
                value: function() {
                    return this.paired
                }
            }, {
                key: "disconnect",
                value: function() {
                    return this.socket && this.socket.close(), !0
                }
            }, {
                key: "sendApiRequest",
                value: function(t) {
                    var e = this;
                    return new Promise((function(n, r) {
                        return "identityFromPermissions" !== t.type || e.paired ? void e.pair().then((function() {
                            if (!e.paired) return r({
                                code: "not_paired",
                                message: "The user did not allow this app to connect to their Scatter"
                            });
                            t.id = j(), t.appkey = e.appkey, t.nonce = A.getNonce() || 0;
                            var i = j();
                            t.nextNonce = F(i), A.setNonce(i), t.hasOwnProperty("payload") && !t.payload.hasOwnProperty("origin") && (t.payload.origin = e.getOrigin()), e.openRequests.push(Object.assign(t, {
                                resolve: n,
                                reject: r
                            })), e.send("api", {
                                data: t,
                                plugin: e.plugin
                            })
                        })) : n(!1)
                    }))
                }
            }, {
                key: "pair",
                value: function() {
                    var t = this,
                        e = !!(0 < arguments.length && void 0 !== arguments[0]) && arguments[0];
                    return new Promise((function(n, r) {
                        t.pairingPromise = {
                            resolve: n,
                            reject: r
                        }, t.send("pair", {
                            data: {
                                appkey: t.appkey,
                                origin: t.getOrigin(),
                                passthrough: e
                            },
                            plugin: t.plugin
                        })
                    }))
                }
            }, {
                key: "send",
                value: function() {
                    var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : null,
                        e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null;
                    null === t && null === e ? this.socket.send("40/scatter") : this.socket.send("42/scatter," + JSON.stringify([t, Object.assign(e, {
                        device: C,
                        uuid: this.uuid
                    })]))
                }
            }, {
                key: "getOrigin",
                value: function() {
                    return t.getOriginOrPlugin(this.plugin)
                }
            }], [{
                key: "getOriginOrPlugin",
                value: function(t) {
                    var e;
                    return "www." === (e = "undefined" == typeof location ? t : location.hasOwnProperty("hostname") && location.hostname.length && "localhost" !== location.hostname ? location.hostname : t).substr(0, 4) && (e = e.replace("www.", "")), e
                }
            }]), t
        }(),
        U = function() {
            function t() {
                var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
                    n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "";
                l()(this, t), this.name = e, this.type = n
            }
            return p()(t, [{
                key: "isSignatureProvider",
                value: function() {
                    return this.type === g
                }
            }, {
                key: "isValid",
                value: function() {
                    return Object.keys(r).map((function(t) {
                        return r[t]
                    })).includes(this.type)
                }
            }], [{
                key: "placeholder",
                value: function() {
                    return new t
                }
            }, {
                key: "fromJson",
                value: function(e) {
                    return Object.assign(t.placeholder(), e)
                }
            }]), t
        }(),
        D = {
            EOS: "eos",
            ETH: "eth",
            TRX: "trx"
        },
        N = (Object.keys(D).map((function(t) {
            return {
                key: t,
                value: D[t]
            }
        })), function() {
            function t() {
                var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : D.EOS,
                    n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "",
                    r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : "",
                    i = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null,
                    o = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : null;
                l()(this, t), this.blockchain = e, this.contract = n, this.symbol = r, this.name = i || r, this.decimals = o
            }
            return p()(t, null, [{
                key: "placeholder",
                value: function() {
                    return new t
                }
            }, {
                key: "fromJson",
                value: function(t) {
                    return Object.assign(this.placeholder(), t)
                }
            }]), t
        }()),
        q = function() {
            function t() {
                var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
                    n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "https",
                    r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : "",
                    i = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 0,
                    o = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : D.EOS,
                    s = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : "";
                l()(this, t), this.name = e, this.protocol = n, this.host = r, this.port = i, this.blockchain = o, this.chainId = s.toString(), this.token = null
            }
            return p()(t, [{
                key: "fullhost",
                value: function() {
                    return "".concat(this.protocol, "://").concat(this.host).concat(this.port ? ":" : "").concat(this.port)
                }
            }, {
                key: "unique",
                value: function() {
                    return ("".concat(this.blockchain, ":") + (this.chainId.length ? "chain:".concat(this.chainId) : "".concat(this.host, ":").concat(this.port))).toLowerCase()
                }
            }], [{
                key: "placeholder",
                value: function() {
                    return new t
                }
            }, {
                key: "fromJson",
                value: function(e) {
                    var n = Object.assign(t.placeholder(), e);
                    return n.chainId = n.chainId ? n.chainId.toString() : "", n.token = e.hasOwnProperty("token") && e.token ? N.fromJson(e.token) : null, n
                }
            }]), t
        }(),
        K = n(3),
        H = n.n(K),
        Y = {
            disconnect: "disconnect",
            isConnected: "isConnected",
            isPaired: "isPaired",
            addEventHandler: "addEventHandler",
            removeEventHandler: "removeEventHandler",
            listen: "listen",
            getVersion: "getVersion",
            getIdentity: "getIdentity",
            getAllAccountsFor: "getAllAccountsFor",
            getIdentityFromPermissions: "getIdentityFromPermissions",
            forgetIdentity: "forgetIdentity",
            updateIdentity: "updateIdentity",
            authenticate: "authenticate",
            getArbitrarySignature: "getArbitrarySignature",
            getPublicKey: "getPublicKey",
            linkAccount: "linkAccount",
            hasAccountFor: "hasAccountFor",
            suggestNetwork: "suggestNetwork",
            requestTransfer: "requestTransfer",
            getAvatar: "getAvatar",
            requestSignature: "requestSignature",
            createTransaction: "createTransaction",
            addToken: "addToken"
        },
        X = (B = {}, H()(B, Y.getIdentity, "login"), H()(B, Y.getAllAccountsFor, "loginAll"), H()(B, Y.forgetIdentity, "logout"), H()(B, Y.getIdentityFromPermissions, "checkLogin"), B),
        V = function() {
            function t(e, n, r) {
                l()(this, t);
                var i = function(t) {
                    return function() {
                        throw console.error("".concat(e, " does not support the ").concat(t, " method.")), new Error("".concat(e, " does not support the ").concat(t, " method."))
                    }
                };
                Object.keys(Y).map((function(t) {
                    return function(t, e) {
                        void 0 === r[e] && (r[e] = t || i(e)), X[e] && void 0 === r[X[e]] && (r[X[e]] = r[e] ? r[e] : i(e))
                    }(n[t], t)
                }))
            }
            return p()(t, null, [{
                key: "bindBasics",
                value: function(t) {
                    t.account = function(e) {
                        return t.identity && t.identity.accounts ? t.identity.accounts.find((function(t) {
                            return t.blockchain === e
                        })) : void 0
                    }
                }
            }]), t
        }(),
        J = n(6),
        $ = n.n(J),
        z = n(8),
        G = n.n(z),
        Q = n(9),
        Z = n.n(Q),
        tt = function(t) {
            function e(t, n) {
                var r;
                return l()(this, e), (r = $()(this, G()(e).call(this, "LocalSocket", y))).name = "LocalSocket", r.context = t, r.holderFns = n, r
            }
            return Z()(e, t), p()(e, [{
                key: "connect",
                value: function(t) {
                    var e = this,
                        n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
                    return new Promise((function(r) {
                        if (!t || !t.length) throw new Error("You must specify a name for this connection");
                        n = Object.assign({
                            linkTimeout: 3e3,
                            allowHttp: !0
                        }, n), e.socketService = new W(t, n.linkTimeout), e.socketService.link(n.allowHttp).then(function() {
                            var t = h()(s.a.mark((function t(n) {
                                return s.a.wrap((function(t) {
                                    for (;;) switch (t.prev = t.next) {
                                        case 0:
                                            if (n) {
                                                t.next = 2;
                                                break
                                            }
                                            return t.abrupt("return", r(!1));
                                        case 2:
                                            return e.holderFns.get().isExtension = !1, e.holderFns.get().wallet || (e.holderFns.get().wallet = e.name), t.abrupt("return", r(e.socketService));
                                        case 5:
                                        case "end":
                                            return t.stop()
                                    }
                                }), t)
                            })));
                            return function() {
                                return t.apply(this, arguments)
                            }
                        }())
                    }))
                }
            }, {
                key: "runAfterInterfacing",
                value: function() {
                    var t = h()(s.a.mark((function t() {
                        var e = this;
                        return s.a.wrap((function(t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return this.holderFns.get().addEventHandler((function(t, n) {
                                        return e.eventHandler(t, n)
                                    }), "internal"), t.next = 3, this.holderFns.get().getIdentityFromPermissions();
                                case 3:
                                    return this.holderFns.get().identity = t.sent, t.abrupt("return", !0);
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t, this)
                    })));
                    return function() {
                        return t.apply(this, arguments)
                    }
                }()
            }, {
                key: "methods",
                value: function() {
                    return e.getMethods(this)
                }
            }, {
                key: "eventHandler",
                value: function() {
                    var t = h()(s.a.mark((function t(e) {
                        return s.a.wrap((function(t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    t.t0 = e, t.next = t.t0 === st.Disconnected ? 3 : t.t0 === st.LoggedOut ? 5 : 9;
                                    break;
                                case 3:
                                    return this.holderFns.get().identity = null, t.abrupt("break", 9);
                                case 5:
                                    return t.next = 7, this.holderFns.get().getIdentityFromPermissions();
                                case 7:
                                    return this.holderFns.get().identity = t.sent, t.abrupt("break", 9);
                                case 9:
                                case "end":
                                    return t.stop()
                            }
                        }), t, this)
                    })));
                    return function() {
                        return t.apply(this, arguments)
                    }
                }()
            }], [{
                key: "getMethods",
                value: function(t) {
                    var e, n = function(e, n) {
                        return (e || n) && (t.holderFns.get().identity = e), n || e
                    };
                    return e = {}, H()(e, Y.disconnect, (function() {
                        return t.socketService.disconnect()
                    })), H()(e, Y.isConnected, (function() {
                        return t.socketService.isConnected()
                    })), H()(e, Y.isPaired, (function() {
                        return t.socketService.isPaired()
                    })), H()(e, Y.addEventHandler, (function(e) {
                        var n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null;
                        return t.socketService.addEventHandler(e, n)
                    })), H()(e, Y.removeEventHandler, (function() {
                        var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : null;
                        return t.socketService.removeEventHandler(e)
                    })), H()(e, Y.listen, (function(e) {
                        return t.socketService.addEventHandler(e)
                    })), H()(e, Y.getVersion, (function() {
                        return t.socketService.sendApiRequest({
                            type: "getVersion",
                            payload: {}
                        })
                    })), H()(e, Y.getIdentity, (function(e) {
                        return t.socketService.sendApiRequest({
                            type: "getOrRequestIdentity",
                            payload: {
                                fields: e || {
                                    accounts: [t.holderFns.get().network]
                                }
                            }
                        }).then(n)
                    })), H()(e, Y.getAllAccountsFor, (function(e) {
                        return t.socketService.sendApiRequest({
                            type: "getAllAccountsFor",
                            payload: {
                                fields: e || {
                                    accounts: [t.holderFns.get().network]
                                }
                            }
                        }).then(n)
                    })), H()(e, Y.getIdentityFromPermissions, (function() {
                        return t.socketService.sendApiRequest({
                            type: "identityFromPermissions",
                            payload: {}
                        }).then(n)
                    })), H()(e, Y.forgetIdentity, (function() {
                        return t.socketService.sendApiRequest({
                            type: "forgetIdentity",
                            payload: {}
                        }).then((function(t) {
                            return n(null, t)
                        }))
                    })), H()(e, Y.updateIdentity, (function(e) {
                        var r = e.name,
                            i = e.kyc;
                        return t.socketService.sendApiRequest({
                            type: "updateIdentity",
                            payload: {
                                name: r,
                                kyc: i
                            }
                        }).then((function(t) {
                            return t ? n(t) : null
                        }))
                    })), H()(e, Y.authenticate, (function(e) {
                        var n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null,
                            r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
                        return t.socketService.sendApiRequest({
                            type: "authenticate",
                            payload: {
                                nonce: e,
                                data: n,
                                publicKey: r
                            }
                        })
                    })), H()(e, Y.getArbitrarySignature, (function(e, n) {
                        return t.socketService.sendApiRequest({
                            type: "requestArbitrarySignature",
                            payload: {
                                publicKey: e,
                                data: n
                            }
                        })
                    })), H()(e, Y.getPublicKey, (function(e) {
                        return t.socketService.sendApiRequest({
                            type: "getPublicKey",
                            payload: {
                                blockchain: e
                            }
                        })
                    })), H()(e, Y.linkAccount, (function(e, n) {
                        return t.socketService.sendApiRequest({
                            type: "linkAccount",
                            payload: {
                                account: e,
                                network: n || t.holderFns.get().network
                            }
                        })
                    })), H()(e, Y.hasAccountFor, (function(e) {
                        return t.socketService.sendApiRequest({
                            type: "hasAccountFor",
                            payload: {
                                network: e || t.holderFns.get().network
                            }
                        })
                    })), H()(e, Y.suggestNetwork, (function(e) {
                        return t.socketService.sendApiRequest({
                            type: "requestAddNetwork",
                            payload: {
                                network: e || t.holderFns.get().network
                            }
                        })
                    })), H()(e, Y.requestTransfer, (function(e, n, r) {
                        var i = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : {};
                        return t.socketService.sendApiRequest({
                            type: "requestTransfer",
                            payload: {
                                network: e || t.holderFns.get().network,
                                to: n,
                                amount: r,
                                options: i
                            }
                        })
                    })), H()(e, Y.getAvatar, (function() {
                        return t.socketService.sendApiRequest({
                            type: "getAvatar",
                            payload: {}
                        })
                    })), H()(e, Y.requestSignature, (function(e) {
                        return t.socketService.sendApiRequest({
                            type: "requestSignature",
                            payload: e
                        })
                    })), H()(e, Y.createTransaction, (function(e, n, r, i) {
                        return t.socketService.sendApiRequest({
                            type: "createTransaction",
                            payload: {
                                blockchain: e,
                                actions: n,
                                account: r,
                                network: i || t.holderFns.get().network
                            }
                        })
                    })), H()(e, Y.addToken, (function(e, n) {
                        return t.socketService.sendApiRequest({
                            type: "addToken",
                            payload: {
                                token: e,
                                network: n || t.holderFns.get().network
                            }
                        })
                    })), e
                }
            }]), e
        }(U),
        et = "https://relay.get-scatter.com:443",
        nt = function(t) {
            function e(t, n) {
                var r;
                return l()(this, e), (r = $()(this, G()(e).call(this, "RelaySocket", y))).name = "RelaySocket", r.context = t, r.holderFns = n, r
            }
            return Z()(e, t), p()(e, [{
                key: "connect",
                value: function(t) {
                    var e = this,
                        n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
                    return new Promise(function() {
                        var r = h()(s.a.mark((function r(i) {
                            var o;
                            return s.a.wrap((function(r) {
                                for (;;) switch (r.prev = r.next) {
                                    case 0:
                                        if (t && t.length) {
                                            r.next = 2;
                                            break
                                        }
                                        throw new Error("You must specify a name for this connection");
                                    case 2:
                                        return n = Object.assign({
                                            linkTimeout: 3e3,
                                            allowHttp: !0
                                        }, n), r.next = 5, fetch("".concat(et, "/app/connect/").concat(C)).then((function(t) {
                                            return t.json()
                                        }));
                                    case 5:
                                        if (o = r.sent) {
                                            r.next = 8;
                                            break
                                        }
                                        return r.abrupt("return", i(!1));
                                    case 8:
                                        e.socketService = new W(t, n.linkTimeout), e.socketService.link(n.allowHttp, o, "relaysock.get-scatter.com:443").then(function() {
                                            var t = h()(s.a.mark((function t(n) {
                                                return s.a.wrap((function(t) {
                                                    for (;;) switch (t.prev = t.next) {
                                                        case 0:
                                                            if (n) {
                                                                t.next = 2;
                                                                break
                                                            }
                                                            return t.abrupt("return", i(!1));
                                                        case 2:
                                                            return e.holderFns.get().isExtension = !1, e.holderFns.get().wallet || (e.holderFns.get().wallet = e.name), t.abrupt("return", i(e.socketService));
                                                        case 5:
                                                        case "end":
                                                            return t.stop()
                                                    }
                                                }), t)
                                            })));
                                            return function() {
                                                return t.apply(this, arguments)
                                            }
                                        }());
                                    case 10:
                                    case "end":
                                        return r.stop()
                                }
                            }), r)
                        })));
                        return function() {
                            return r.apply(this, arguments)
                        }
                    }())
                }
            }, {
                key: "runAfterInterfacing",
                value: function() {
                    var t = h()(s.a.mark((function t() {
                        return s.a.wrap((function(t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.next = 2, this.holderFns.get().getIdentityFromPermissions();
                                case 2:
                                    return this.holderFns.get().identity = t.sent, t.abrupt("return", !0);
                                case 4:
                                case "end":
                                    return t.stop()
                            }
                        }), t, this)
                    })));
                    return function() {
                        return t.apply(this, arguments)
                    }
                }()
            }, {
                key: "methods",
                value: function() {
                    return tt.getMethods(this)
                }
            }, {
                key: "eventHandler",
                value: function() {
                    var t = h()(s.a.mark((function t(e) {
                        return s.a.wrap((function(t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    t.t0 = e, t.next = t.t0 === st.Disconnected ? 3 : t.t0 === st.LoggedOut ? 5 : 9;
                                    break;
                                case 3:
                                    return this.holderFns.get().identity = null, t.abrupt("break", 9);
                                case 5:
                                    return t.next = 7, this.holderFns.get().getIdentityFromPermissions();
                                case 7:
                                    return this.holderFns.get().identity = t.sent, t.abrupt("break", 9);
                                case 9:
                                case "end":
                                    return t.stop()
                            }
                        }), t, this)
                    })));
                    return function() {
                        return t.apply(this, arguments)
                    }
                }()
            }]), e
        }(U),
        rt = !1;
    "undefined" != typeof window && "undefined" != typeof document && (void 0 === window.scatter ? document.addEventListener("scatterLoaded", (function() {
        return rt = !0
    })) : rt = !0);
    var it = function() {
            var t = h()(s.a.mark((function t() {
                var e, n, r = arguments;
                return s.a.wrap((function(t) {
                    for (;;) switch (t.prev = t.next) {
                        case 0:
                            return e = 0 < r.length && void 0 !== r[0] ? r[0] : null, n = 1 < r.length && void 0 !== r[1] ? r[1] : 0, t.abrupt("return", new Promise((function(t) {
                                return e || (e = t), rt ? e(!0) : 5 < n ? e(!1) : void setTimeout((function() {
                                    return it(e, n + 1)
                                }), 100)
                            })));
                        case 3:
                        case "end":
                            return t.stop()
                    }
                }), t)
            })));
            return function() {
                return t.apply(this, arguments)
            }
        }(),
        ot = function(t) {
            function e(t, n) {
                var r;
                return l()(this, e), (r = $()(this, G()(e).call(this, "InjectedWallet", y))).name = "InjectedWallet", r.context = t, r.holderFns = n, r
            }
            return Z()(e, t), p()(e, [{
                key: "connect",
                value: function() {
                    var t = h()(s.a.mark((function t() {
                        var e = this;
                        return s.a.wrap((function(t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.abrupt("return", new Promise(function() {
                                        var t = h()(s.a.mark((function t(n) {
                                            return s.a.wrap((function(t) {
                                                for (;;) switch (t.prev = t.next) {
                                                    case 0:
                                                        return t.next = 2, it();
                                                    case 2:
                                                        t.sent && (e.holderFns && !e.holderFns.get().wallet && (e.holderFns.get().wallet = e.name), n("injection"));
                                                    case 4:
                                                    case "end":
                                                        return t.stop()
                                                }
                                            }), t)
                                        })));
                                        return function() {
                                            return t.apply(this, arguments)
                                        }
                                    }()));
                                case 1:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function() {
                        return t.apply(this, arguments)
                    }
                }()
            }, {
                key: "runBeforeInterfacing",
                value: function() {
                    var t = h()(s.a.mark((function t() {
                        var e, n, r, i, o = this;
                        return s.a.wrap((function(t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return (e = this.context.network) && (n = window.scatter.getIdentity.bind(window.scatter), r = window.scatter.useIdentity.bind(window.scatter), window.scatter.getIdentity = function(t) {
                                        return n(t || {
                                            accounts: [e]
                                        }).then((function(t) {
                                            return o.holderFns.get().identity = t, r(t), t
                                        }))
                                    }, i = window.scatter.suggestNetwork.bind(window.scatter), window.scatter.suggestNetwork = function(t) {
                                        return i(t || e)
                                    }), this.holderFns.get().wallet === this.name && (window.scatter.wallet = this.name), this.holderFns.set(window.scatter), this.context = this.holderFns.get(), t.abrupt("return", !0);
                                case 6:
                                case "end":
                                    return t.stop()
                            }
                        }), t, this)
                    })));
                    return function() {
                        return t.apply(this, arguments)
                    }
                }()
            }, {
                key: "runAfterInterfacing",
                value: function() {
                    var t = h()(s.a.mark((function t() {
                        return s.a.wrap((function(t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return this.context.isExtension = !0, this.context.connect = this.connect, t.abrupt("return", !0);
                                case 3:
                                case "end":
                                    return t.stop()
                            }
                        }), t, this)
                    })));
                    return function() {
                        return t.apply(this, arguments)
                    }
                }()
            }, {
                key: "methods",
                value: function() {
                    return {}
                }
            }]), e
        }(U);
    n.d(e, "EVENTS", (function() {
        return st
    })), n.d(e, "Plugin", (function() {
        return U
    })), n.d(e, "PluginTypes", (function() {
        return r
    })), n.d(e, "Blockchains", (function() {
        return D
    })), n.d(e, "Network", (function() {
        return q
    })), n.d(e, "SocketService", (function() {
        return W
    })), n.d(e, "WalletInterface", (function() {
        return V
    })), n.d(e, "WALLET_METHODS", (function() {
        return Y
    }));
    var st = {
            Disconnected: "dced",
            LoggedOut: "logout"
        },
        at = null,
        ut = [],
        ct = {},
        ht = function() {
            function t() {
                l()(this, t), this.identity = null, this.network = null, w.loadPlugin(new nt(this, ct)), w.loadPlugin(new tt(this, ct)), w.loadPlugin(new ot(this, ct))
            }
            return p()(t, [{
                key: "loadPlugin",
                value: function(t) {
                    if (!t.isValid()) throw new Error("".concat(t.name, " doesn't seem to be a valid ScatterJS plugin."));
                    w.loadPlugin(t), t.type === g && (this[t.name] = t.signatureProvider((function() {
                        if (!ct.get().identity) throw new Error("No Identity")
                    }), (function() {
                        return ct.get().identity
                    })), this[t.name + "Hook"] = t.hookProvider, "function" == typeof t.multiHook && (this[t.name + "MultiHook"] = t.multiHook), ut.push(t.setSocketService)), t.type === y && t.init(this, ct, ut)
                }
            }, {
                key: "connect",
                value: function() {
                    var t = h()(s.a.mark((function t(e, n) {
                        var r = this;
                        return s.a.wrap((function(t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.abrupt("return", new Promise(function() {
                                        var t = h()(s.a.mark((function t(i) {
                                            var o, a, c, f, l, d;
                                            return s.a.wrap((function(t) {
                                                for (;;) switch (t.prev = t.next) {
                                                    case 0:
                                                        n || (n = {}), r.network = n.hasOwnProperty("network") ? n.network : null, o = w.wallets(), at && at.disconnect(), a = !1, c = [], f = function(t) {
                                                            if (a) return {
                                                                v: void 0
                                                            };
                                                            var r = o[t];
                                                            c.push(Promise.race([r.connect(e, n).then(function() {
                                                                var t = h()(s.a.mark((function t(e) {
                                                                    return s.a.wrap((function(t) {
                                                                        for (;;) switch (t.prev = t.next) {
                                                                            case 0:
                                                                                if (!e) {
                                                                                    t.next = 12;
                                                                                    break
                                                                                }
                                                                                if ("injection" !== e && (at = e, ut.map((function(t) {
                                                                                        return t(e)
                                                                                    }))), "function" != typeof r.runBeforeInterfacing) {
                                                                                    t.next = 5;
                                                                                    break
                                                                                }
                                                                                return t.next = 5, r.runBeforeInterfacing();
                                                                            case 5:
                                                                                if (new V(r.name, r.methods(), ct.get()), "function" != typeof r.runAfterInterfacing) {
                                                                                    t.next = 9;
                                                                                    break
                                                                                }
                                                                                return t.next = 9, r.runAfterInterfacing();
                                                                            case 9:
                                                                                V.bindBasics(ct.get()), a = !0, i(!0);
                                                                            case 12:
                                                                            case "end":
                                                                                return t.stop()
                                                                        }
                                                                    }), t)
                                                                })));
                                                                return function() {
                                                                    return t.apply(this, arguments)
                                                                }
                                                            }()).catch((function() {
                                                                return !1
                                                            })), new Promise((function(t) {
                                                                return setTimeout((function() {
                                                                    return t(!1)
                                                                }), 5e3)
                                                            }))]))
                                                        }, l = 0;
                                                    case 8:
                                                        if (!(l < o.length)) {
                                                            t.next = 15;
                                                            break
                                                        }
                                                        if (d = f(l), "object" !== u()(d)) {
                                                            t.next = 12;
                                                            break
                                                        }
                                                        return t.abrupt("return", d.v);
                                                    case 12:
                                                        l++, t.next = 8;
                                                        break;
                                                    case 15:
                                                        return t.next = 17, Promise.all(c);
                                                    case 17:
                                                        i(!1);
                                                    case 18:
                                                    case "end":
                                                        return t.stop()
                                                }
                                            }), t)
                                        })));
                                        return function() {
                                            return t.apply(this, arguments)
                                        }
                                    }()));
                                case 1:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function() {
                        return t.apply(this, arguments)
                    }
                }()
            }]), t
        }(),
        ft = new Proxy(new(function() {
            function t(e) {
                l()(this, t), this.scatter = e
            }
            return p()(t, [{
                key: "plugins",
                value: function() {
                    var t = this;
                    if (!this.scatter.isExtension) {
                        for (var e = arguments.length, n = Array(e), r = 0; r < e; r++) n[r] = arguments[r];
                        n.map((function(e) {
                            return t.scatter.loadPlugin(e)
                        }))
                    }
                }
            }, {
                key: "connect",
                value: function() {
                    var t;
                    return (t = this.scatter).connect.apply(t, arguments)
                }
            }, {
                key: "catchAll",
                value: function() {}
            }]), t
        }())(new ht), {
            get: function(t, e) {
                return void 0 === t[e] ? t.scatter[e] : t[e]
            }
        });
    ct.set = function(t) {
        return ft.scatter = t
    }, ct.get = function() {
        return ft.scatter
    }, "undefined" != typeof window && (window.ScatterJS = ft), ft.Plugin = U, ft.PluginTypes = r, ft.Blockchains = D, ft.Network = q, ft.Token = N, ft.SocketService = W, ft.EVENTS = st, ft.WalletInterface = V, ft.WALLET_METHODS = Y;
    e.default = ft
}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,